
Can_Analyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b3c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08005d1c  08005d1c  00006d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d8  080060d8  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060d8  080060d8  000070d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060e0  080060e0  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e0  080060e0  000070e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060e4  080060e4  000070e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080060e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  2000006c  08006154  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08006154  00008404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a4f  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b1  00000000  00000000  00019aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab7  00000000  00000000  0001cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed1f  00000000  00000000  0001d95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdae  00000000  00000000  0003c67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bea73  00000000  00000000  0004c42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ae9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004164  00000000  00000000  0010aee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005d04 	.word	0x08005d04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08005d04 	.word	0x08005d04

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <CAN_Analyzer_Init>:
 *          - Starts the CAN peripheral
 * @param None
 * @retval None
 */
void CAN_Analyzer_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
    printf("=== STM32 CAN Analyzer Initializing ===\r\n");
 80005f0:	4813      	ldr	r0, [pc, #76]	@ (8000640 <CAN_Analyzer_Init+0x54>)
 80005f2:	f004 fd25 	bl	8005040 <puts>

    // Configure CAN filters to accept all messages
    CAN_Config_Filter();
 80005f6:	f000 f837 	bl	8000668 <CAN_Config_Filter>

    // Start CAN peripheral
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <CAN_Analyzer_Init+0x58>)
 80005fc:	f001 fab6 	bl	8001b6c <HAL_FDCAN_Start>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d004      	beq.n	8000610 <CAN_Analyzer_Init+0x24>
    {
        printf("ERROR: Failed to start FDCAN peripheral!\r\n");
 8000606:	4810      	ldr	r0, [pc, #64]	@ (8000648 <CAN_Analyzer_Init+0x5c>)
 8000608:	f004 fd1a 	bl	8005040 <puts>
        Error_Handler();
 800060c:	f000 fbac 	bl	8000d68 <Error_Handler>
    }

    printf("CAN Analyzer Ready!\r\n");
 8000610:	480e      	ldr	r0, [pc, #56]	@ (800064c <CAN_Analyzer_Init+0x60>)
 8000612:	f004 fd15 	bl	8005040 <puts>
    printf("Configuration:\r\n");
 8000616:	480e      	ldr	r0, [pc, #56]	@ (8000650 <CAN_Analyzer_Init+0x64>)
 8000618:	f004 fd12 	bl	8005040 <puts>
    printf("  - Baud Rate: 500 kbit/s\r\n");
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <CAN_Analyzer_Init+0x68>)
 800061e:	f004 fd0f 	bl	8005040 <puts>
    printf("  - Mode: Classic CAN\r\n");
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <CAN_Analyzer_Init+0x6c>)
 8000624:	f004 fd0c 	bl	8005040 <puts>
    printf("  - Filters: Accept All IDs\r\n");
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <CAN_Analyzer_Init+0x70>)
 800062a:	f004 fd09 	bl	8005040 <puts>
    printf("  - UART Output: 115200 baud\r\n");
 800062e:	480c      	ldr	r0, [pc, #48]	@ (8000660 <CAN_Analyzer_Init+0x74>)
 8000630:	f004 fd06 	bl	8005040 <puts>
    printf("=== Listening for CAN messages ===\r\n\r\n");
 8000634:	480b      	ldr	r0, [pc, #44]	@ (8000664 <CAN_Analyzer_Init+0x78>)
 8000636:	f004 fd03 	bl	8005040 <puts>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	08005d1c 	.word	0x08005d1c
 8000644:	2000011c 	.word	0x2000011c
 8000648:	08005d48 	.word	0x08005d48
 800064c:	08005d74 	.word	0x08005d74
 8000650:	08005d8c 	.word	0x08005d8c
 8000654:	08005d9c 	.word	0x08005d9c
 8000658:	08005db8 	.word	0x08005db8
 800065c:	08005dd0 	.word	0x08005dd0
 8000660:	08005df0 	.word	0x08005df0
 8000664:	08005e10 	.word	0x08005e10

08000668 <CAN_Config_Filter>:
 * @param None
 * @retval None
 */

void CAN_Config_Filter(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800066c:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <CAN_Config_Filter+0xb4>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8000672:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <CAN_Config_Filter+0xb4>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <CAN_Config_Filter+0xb4>)
 800067a:	2202      	movs	r2, #2
 800067c:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800067e:	4b27      	ldr	r3, [pc, #156]	@ (800071c <CAN_Config_Filter+0xb4>)
 8000680:	2201      	movs	r2, #1
 8000682:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x000;      // Filter ID
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <CAN_Config_Filter+0xb4>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x000;      // Filter Mask (0x000 = accept all)
 800068a:	4b24      	ldr	r3, [pc, #144]	@ (800071c <CAN_Config_Filter+0xb4>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000690:	4922      	ldr	r1, [pc, #136]	@ (800071c <CAN_Config_Filter+0xb4>)
 8000692:	4823      	ldr	r0, [pc, #140]	@ (8000720 <CAN_Config_Filter+0xb8>)
 8000694:	f001 fa10 	bl	8001ab8 <HAL_FDCAN_ConfigFilter>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <CAN_Config_Filter+0x3a>
    {
    	Error_Handler();
 800069e:	f000 fb63 	bl	8000d68 <Error_Handler>
    }

    // Configure filter to accept all extended IDs
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <CAN_Config_Filter+0xb4>)
 80006a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006a8:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <CAN_Config_Filter+0xb4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <CAN_Config_Filter+0xb4>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006b6:	4b19      	ldr	r3, [pc, #100]	@ (800071c <CAN_Config_Filter+0xb4>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x00000000; // Filter ID
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <CAN_Config_Filter+0xb4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x00000000; // Filter Mask (0x00000000 = accept all)
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <CAN_Config_Filter+0xb4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80006c8:	4914      	ldr	r1, [pc, #80]	@ (800071c <CAN_Config_Filter+0xb4>)
 80006ca:	4815      	ldr	r0, [pc, #84]	@ (8000720 <CAN_Config_Filter+0xb8>)
 80006cc:	f001 f9f4 	bl	8001ab8 <HAL_FDCAN_ConfigFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <CAN_Config_Filter+0x72>
    {
        Error_Handler();
 80006d6:	f000 fb47 	bl	8000d68 <Error_Handler>
    }

    // Enable notifications
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	4810      	ldr	r0, [pc, #64]	@ (8000720 <CAN_Config_Filter+0xb8>)
 80006e0:	f001 fc28 	bl	8001f34 <HAL_FDCAN_ActivateNotification>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <CAN_Config_Filter+0x86>
    {
        Error_Handler();
 80006ea:	f000 fb3d 	bl	8000d68 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_COMPLETE, 0) != HAL_OK)
 80006ee:	2200      	movs	r2, #0
 80006f0:	2180      	movs	r1, #128	@ 0x80
 80006f2:	480b      	ldr	r0, [pc, #44]	@ (8000720 <CAN_Config_Filter+0xb8>)
 80006f4:	f001 fc1e 	bl	8001f34 <HAL_FDCAN_ActivateNotification>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <CAN_Config_Filter+0x9a>
    {
        Error_Handler();
 80006fe:	f000 fb33 	bl	8000d68 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_BUS_OFF | FDCAN_IT_ERROR_WARNING | FDCAN_IT_ERROR_PASSIVE, 0) != HAL_OK)
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 2160 	mov.w	r1, #917504	@ 0xe0000
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <CAN_Config_Filter+0xb8>)
 800070a:	f001 fc13 	bl	8001f34 <HAL_FDCAN_ActivateNotification>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <CAN_Config_Filter+0xb0>
    {
        Error_Handler();
 8000714:	f000 fb28 	bl	8000d68 <Error_Handler>
    }
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000d4 	.word	0x200000d4
 8000720:	2000011c 	.word	0x2000011c

08000724 <CAN_Send_Message>:
 * @param length: Data length (0-8 bytes)
 * @retval None
 */

void CAN_Send_Message(uint32_t id, uint8_t *data, uint8_t length)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	4613      	mov	r3, r2
 8000730:	71fb      	strb	r3, [r7, #7]
    // Configure transmission header
    if (id <= 0x7FF) {
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000738:	d206      	bcs.n	8000748 <CAN_Send_Message+0x24>
        TxHeader.IdType = FDCAN_STANDARD_ID;
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <CAN_Send_Message+0x9c>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
        TxHeader.Identifier = id;
 8000740:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <CAN_Send_Message+0x9c>)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	e006      	b.n	8000756 <CAN_Send_Message+0x32>
    } else {
        TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <CAN_Send_Message+0x9c>)
 800074a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800074e:	605a      	str	r2, [r3, #4]
        TxHeader.Identifier = id;
 8000750:	4a1b      	ldr	r2, [pc, #108]	@ (80007c0 <CAN_Send_Message+0x9c>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6013      	str	r3, [r2, #0]
    }

    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <CAN_Send_Message+0x9c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = length << 16; // Convert to FDCAN format
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	041b      	lsls	r3, r3, #16
 8000760:	4a17      	ldr	r2, [pc, #92]	@ (80007c0 <CAN_Send_Message+0x9c>)
 8000762:	60d3      	str	r3, [r2, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <CAN_Send_Message+0x9c>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <CAN_Send_Message+0x9c>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <CAN_Send_Message+0x9c>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <CAN_Send_Message+0x9c>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800077c:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <CAN_Send_Message+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]

    // Send the message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK)
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	490e      	ldr	r1, [pc, #56]	@ (80007c0 <CAN_Send_Message+0x9c>)
 8000786:	480f      	ldr	r0, [pc, #60]	@ (80007c4 <CAN_Send_Message+0xa0>)
 8000788:	f001 fa88 	bl	8001c9c <HAL_FDCAN_AddMessageToTxFifoQ>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00b      	beq.n	80007aa <CAN_Send_Message+0x86>
    {
        can_error_count++;
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <CAN_Send_Message+0xa4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a0b      	ldr	r2, [pc, #44]	@ (80007c8 <CAN_Send_Message+0xa4>)
 800079a:	6013      	str	r3, [r2, #0]
        printf("CAN TX Error! Error count: %lu\r\n", can_error_count);
 800079c:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <CAN_Send_Message+0xa4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	480a      	ldr	r0, [pc, #40]	@ (80007cc <CAN_Send_Message+0xa8>)
 80007a4:	f004 fbe4 	bl	8004f70 <iprintf>
    }
    else
    {
        Print_CAN_Message("TX", TxHeader.Identifier, data, length);
    }
}
 80007a8:	e006      	b.n	80007b8 <CAN_Send_Message+0x94>
        Print_CAN_Message("TX", TxHeader.Identifier, data, length);
 80007aa:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <CAN_Send_Message+0x9c>)
 80007ac:	6819      	ldr	r1, [r3, #0]
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4807      	ldr	r0, [pc, #28]	@ (80007d0 <CAN_Send_Message+0xac>)
 80007b4:	f000 f840 	bl	8000838 <Print_CAN_Message>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000088 	.word	0x20000088
 80007c4:	2000011c 	.word	0x2000011c
 80007c8:	200000f8 	.word	0x200000f8
 80007cc:	08005e38 	.word	0x08005e38
 80007d0:	08005e5c 	.word	0x08005e5c

080007d4 <CAN_Process_Received_Message>:
 * @brief Process received CAN message
 * @param None
 * @retval None
 */
void CAN_Process_Received_Message(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
    if (can_rx_complete)
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <CAN_Process_Received_Message+0x54>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d01e      	beq.n	8000820 <CAN_Process_Received_Message+0x4c>
    {
        can_rx_complete = 0;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <CAN_Process_Received_Message+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]

        // Extract data length from FDCAN format
        uint8_t data_length = (RxHeader.DataLength >> 16) & 0x0F;
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <CAN_Process_Received_Message+0x58>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	0c1b      	lsrs	r3, r3, #16
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 030f 	and.w	r3, r3, #15
 80007f4:	71fb      	strb	r3, [r7, #7]

        Print_CAN_Message("RX", RxHeader.Identifier, RxData, data_length);
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <CAN_Process_Received_Message+0x58>)
 80007f8:	6819      	ldr	r1, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000830 <CAN_Process_Received_Message+0x5c>)
 80007fe:	480d      	ldr	r0, [pc, #52]	@ (8000834 <CAN_Process_Received_Message+0x60>)
 8000800:	f000 f81a 	bl	8000838 <Print_CAN_Message>

        // Example: Echo back received message with ID incremented by 1
        // You can modify this behavior based on your analyzer requirements
        if (RxHeader.Identifier < 0x7FE) // Avoid overflow for standard IDs
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <CAN_Process_Received_Message+0x58>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f240 72fd 	movw	r2, #2045	@ 0x7fd
 800080c:	4293      	cmp	r3, r2
 800080e:	d807      	bhi.n	8000820 <CAN_Process_Received_Message+0x4c>
        {
            CAN_Send_Message(RxHeader.Identifier + 1, RxData, data_length);
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <CAN_Process_Received_Message+0x58>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	4905      	ldr	r1, [pc, #20]	@ (8000830 <CAN_Process_Received_Message+0x5c>)
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff82 	bl	8000724 <CAN_Send_Message>
        }
    }
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000f5 	.word	0x200000f5
 800082c:	200000ac 	.word	0x200000ac
 8000830:	200000ec 	.word	0x200000ec
 8000834:	08005e60 	.word	0x08005e60

08000838 <Print_CAN_Message>:
 * @param data: Pointer to data buffer
 * @param length: Data length
 * @retval None
 */
void Print_CAN_Message(const char* direction, uint32_t id, uint8_t *data, uint8_t length)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	70fb      	strb	r3, [r7, #3]
    printf("[%s] ID: 0x%03lX, DLC: %d, Data: ", direction, id, length);
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	68f9      	ldr	r1, [r7, #12]
 800084c:	480d      	ldr	r0, [pc, #52]	@ (8000884 <Print_CAN_Message+0x4c>)
 800084e:	f004 fb8f 	bl	8004f70 <iprintf>

    for (uint8_t i = 0; i < length; i++)
 8000852:	2300      	movs	r3, #0
 8000854:	75fb      	strb	r3, [r7, #23]
 8000856:	e00a      	b.n	800086e <Print_CAN_Message+0x36>
    {
        printf("0x%02X ", data[i]);
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	4809      	ldr	r0, [pc, #36]	@ (8000888 <Print_CAN_Message+0x50>)
 8000864:	f004 fb84 	bl	8004f70 <iprintf>
    for (uint8_t i = 0; i < length; i++)
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	3301      	adds	r3, #1
 800086c:	75fb      	strb	r3, [r7, #23]
 800086e:	7dfa      	ldrb	r2, [r7, #23]
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	429a      	cmp	r2, r3
 8000874:	d3f0      	bcc.n	8000858 <Print_CAN_Message+0x20>
    }
    printf("\r\n");
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <Print_CAN_Message+0x54>)
 8000878:	f004 fbe2 	bl	8005040 <puts>
}
 800087c:	bf00      	nop
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	08005e64 	.word	0x08005e64
 8000888:	08005e88 	.word	0x08005e88
 800088c:	08005e90 	.word	0x08005e90

08000890 <Get_CAN_Error_String>:
 * @param error_code: HAL error code
 * @retval Pointer to error description string
 */

const char* Get_CAN_Error_String(uint32_t error_code)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    switch (error_code)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800089e:	d02c      	beq.n	80008fa <Get_CAN_Error_String+0x6a>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008a6:	d838      	bhi.n	800091a <Get_CAN_Error_String+0x8a>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80008ae:	d026      	beq.n	80008fe <Get_CAN_Error_String+0x6e>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80008b6:	d830      	bhi.n	800091a <Get_CAN_Error_String+0x8a>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d814      	bhi.n	80008e8 <Get_CAN_Error_String+0x58>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b06      	cmp	r3, #6
 80008c2:	d82a      	bhi.n	800091a <Get_CAN_Error_String+0x8a>
 80008c4:	a201      	add	r2, pc, #4	@ (adr r2, 80008cc <Get_CAN_Error_String+0x3c>)
 80008c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ca:	bf00      	nop
 80008cc:	080008f3 	.word	0x080008f3
 80008d0:	08000903 	.word	0x08000903
 80008d4:	08000907 	.word	0x08000907
 80008d8:	0800090b 	.word	0x0800090b
 80008dc:	0800090f 	.word	0x0800090f
 80008e0:	08000913 	.word	0x08000913
 80008e4:	08000917 	.word	0x08000917
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80008ee:	d002      	beq.n	80008f6 <Get_CAN_Error_String+0x66>
 80008f0:	e013      	b.n	800091a <Get_CAN_Error_String+0x8a>
    {
        case HAL_FDCAN_ERROR_NONE: return "No Error";
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <Get_CAN_Error_String+0x98>)
 80008f4:	e012      	b.n	800091c <Get_CAN_Error_String+0x8c>
        case FDCAN_FLAG_ERROR_WARNING: return "Error Warning";
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <Get_CAN_Error_String+0x9c>)
 80008f8:	e010      	b.n	800091c <Get_CAN_Error_String+0x8c>
        case FDCAN_ESI_PASSIVE: return "Error Passive";
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <Get_CAN_Error_String+0xa0>)
 80008fc:	e00e      	b.n	800091c <Get_CAN_Error_String+0x8c>
        case FDCAN_FLAG_BUS_OFF: return "Bus Off";
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <Get_CAN_Error_String+0xa4>)
 8000900:	e00c      	b.n	800091c <Get_CAN_Error_String+0x8c>
        case FDCAN_PROTOCOL_ERROR_STUFF: return "Stuff Error";
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <Get_CAN_Error_String+0xa8>)
 8000904:	e00a      	b.n	800091c <Get_CAN_Error_String+0x8c>
        case FDCAN_PROTOCOL_ERROR_FORM: return "Form Error";
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <Get_CAN_Error_String+0xac>)
 8000908:	e008      	b.n	800091c <Get_CAN_Error_String+0x8c>
        case FDCAN_PROTOCOL_ERROR_ACK: return "ACK Error";
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <Get_CAN_Error_String+0xb0>)
 800090c:	e006      	b.n	800091c <Get_CAN_Error_String+0x8c>
        case FDCAN_PROTOCOL_ERROR_BIT1: return "Bit1 Error";
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <Get_CAN_Error_String+0xb4>)
 8000910:	e004      	b.n	800091c <Get_CAN_Error_String+0x8c>
        case FDCAN_PROTOCOL_ERROR_BIT0: return "Bit0 Error";
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <Get_CAN_Error_String+0xb8>)
 8000914:	e002      	b.n	800091c <Get_CAN_Error_String+0x8c>
        case FDCAN_PROTOCOL_ERROR_CRC: return "CRC Error";
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <Get_CAN_Error_String+0xbc>)
 8000918:	e000      	b.n	800091c <Get_CAN_Error_String+0x8c>
        default: return "Unknown Error";
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <Get_CAN_Error_String+0xc0>)
    }
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	08005f20 	.word	0x08005f20
 800092c:	08005f2c 	.word	0x08005f2c
 8000930:	08005f3c 	.word	0x08005f3c
 8000934:	08005f4c 	.word	0x08005f4c
 8000938:	08005f54 	.word	0x08005f54
 800093c:	08005f60 	.word	0x08005f60
 8000940:	08005f6c 	.word	0x08005f6c
 8000944:	08005f78 	.word	0x08005f78
 8000948:	08005f84 	.word	0x08005f84
 800094c:	08005f90 	.word	0x08005f90
 8000950:	08005f9c 	.word	0x08005f9c

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fcf2 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f83e 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 f91a 	bl	8000b98 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000964:	f000 f886 	bl	8000a74 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8000968:	f000 f8ca 	bl	8000b00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800096c:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <main+0x80>)
 800096e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000972:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <main+0x80>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <main+0x80>)
 800097c:	2200      	movs	r2, #0
 800097e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <main+0x80>)
 8000982:	2200      	movs	r2, #0
 8000984:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <main+0x80>)
 8000988:	2200      	movs	r2, #0
 800098a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800098c:	4911      	ldr	r1, [pc, #68]	@ (80009d4 <main+0x80>)
 800098e:	2000      	movs	r0, #0
 8000990:	f000 fc0c 	bl	80011ac <BSP_COM_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <main+0x4a>
  {
    Error_Handler();
 800099a:	f000 f9e5 	bl	8000d68 <Error_Handler>
  }

  CAN_Analyzer_Init();
 800099e:	f7ff fe25 	bl	80005ec <CAN_Analyzer_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  CAN_Process_Received_Message();
 80009a2:	f7ff ff17 	bl	80007d4 <CAN_Process_Received_Message>

	  static uint32_t led_tick = 0;

	  if (HAL_GetTick() - led_tick >= 500)
 80009a6:	f000 fd2f 	bl	8001408 <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <main+0x84>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80009b6:	d309      	bcc.n	80009cc <main+0x78>
	  {
		  led_tick = HAL_GetTick();
 80009b8:	f000 fd26 	bl	8001408 <HAL_GetTick>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <main+0x84>)
 80009c0:	6013      	str	r3, [r2, #0]
	      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009c2:	2120      	movs	r1, #32
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c8:	f001 ff9a 	bl	8002900 <HAL_GPIO_TogglePin>
	  }

	  // Small delay to prevent excessive CPU usage
	  HAL_Delay(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f000 fd27 	bl	8001420 <HAL_Delay>
  {
 80009d2:	e7e6      	b.n	80009a2 <main+0x4e>
 80009d4:	2000010c 	.word	0x2000010c
 80009d8:	20000214 	.word	0x20000214

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	@ 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	2238      	movs	r2, #56	@ 0x38
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f004 fc08 	bl	8005200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f001 ff98 	bl	8002934 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0e:	2340      	movs	r3, #64	@ 0x40
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a12:	2302      	movs	r3, #2
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a16:	2302      	movs	r3, #2
 8000a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a1e:	2355      	movs	r3, #85	@ 0x55
 8000a20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2e:	f107 0318 	add.w	r3, r7, #24
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 f832 	bl	8002a9c <HAL_RCC_OscConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a3e:	f000 f993 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a42:	230f      	movs	r3, #15
 8000a44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a46:	2303      	movs	r3, #3
 8000a48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2104      	movs	r1, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fb30 	bl	80030c0 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a66:	f000 f97f 	bl	8000d68 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3750      	adds	r7, #80	@ 0x50
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000a7a:	4a20      	ldr	r2, [pc, #128]	@ (8000afc <MX_FDCAN1_Init+0x88>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000aa4:	2214      	movs	r2, #20
 8000aa6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000aae:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000ab0:	220d      	movs	r2, #13
 8000ab2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_FDCAN1_Init+0x84>)
 8000ae6:	f000 fe8d 	bl	8001804 <HAL_FDCAN_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000af0:	f000 f93a 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000011c 	.word	0x2000011c
 8000afc:	40006400 	.word	0x40006400

08000b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b06:	4a23      	ldr	r2, [pc, #140]	@ (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b4a:	f002 fec5 	bl	80038d8 <HAL_UART_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b54:	f000 f908 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b5c:	f004 f87b 	bl	8004c56 <HAL_UARTEx_SetTxFifoThreshold>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f000 f8ff 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b6e:	f004 f8b0 	bl	8004cd2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 f8f6 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b7e:	f004 f831 	bl	8004be4 <HAL_UARTEx_DisableFifoMode>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 f8ee 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000180 	.word	0x20000180
 8000b94:	40013800 	.word	0x40013800

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b2b      	ldr	r3, [pc, #172]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bba:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	4a24      	ldr	r2, [pc, #144]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000bcc:	f043 0320 	orr.w	r3, r3, #32
 8000bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd2:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	f003 0320 	and.w	r3, r3, #32
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	4a18      	ldr	r2, [pc, #96]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_GPIO_Init+0xc4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2120      	movs	r1, #32
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c16:	f001 fe5b 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <MX_GPIO_Init+0xc8>)
 8000c32:	f001 fccb 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c36:	2320      	movs	r3, #32
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f001 fcbc 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	@ 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000800 	.word	0x48000800

08000c64 <HAL_FDCAN_RxFifo0Callback>:
 * @param hfdcan: Pointer to FDCAN handle
 * @param RxFifo0ITs: Interrupt flags
 * @retval None
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00b      	beq.n	8000c90 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
        // Retrieve the received message
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000c7a:	4a08      	ldr	r2, [pc, #32]	@ (8000c9c <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000c7c:	2140      	movs	r1, #64	@ 0x40
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f001 f850 	bl	8001d24 <HAL_FDCAN_GetRxMessage>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_FDCAN_RxFifo0Callback+0x2c>
        {
            can_rx_complete = 1;  // Set flag for main loop processing
 8000c8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000ec 	.word	0x200000ec
 8000c9c:	200000ac 	.word	0x200000ac
 8000ca0:	200000f5 	.word	0x200000f5

08000ca4 <HAL_FDCAN_TxEventFifoCallback>:
 * @param hfdcan: Pointer to FDCAN handle
 * @param TxEventFifoITs: Interrupt flags
 * @retval None
 */
void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
    can_tx_complete = 1;  // Set flag indicating transmission complete
 8000cae:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <HAL_FDCAN_TxEventFifoCallback+0x1c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	200000f4 	.word	0x200000f4

08000cc4 <HAL_FDCAN_ErrorCallback>:
 *          Provides detailed error information for debugging.
 * @param hfdcan: Pointer to FDCAN handle
 * @retval None
 */
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
    can_error_count++;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <HAL_FDCAN_ErrorCallback+0x88>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <HAL_FDCAN_ErrorCallback+0x88>)
 8000cd4:	6013      	str	r3, [r2, #0]
    can_stats.total_errors++;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <HAL_FDCAN_ErrorCallback+0x8c>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d50 <HAL_FDCAN_ErrorCallback+0x8c>)
 8000cde:	6093      	str	r3, [r2, #8]

    // Get detailed error information
    uint32_t error_code = HAL_FDCAN_GetError(hfdcan);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f001 fb94 	bl	800240e <HAL_FDCAN_GetError>
 8000ce6:	60f8      	str	r0, [r7, #12]

    printf("CAN Error Detected!\r\n");
 8000ce8:	481a      	ldr	r0, [pc, #104]	@ (8000d54 <HAL_FDCAN_ErrorCallback+0x90>)
 8000cea:	f004 f9a9 	bl	8005040 <puts>
    printf("  Error Code: 0x%08lX (%s)\r\n", error_code, Get_CAN_Error_String(error_code));
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f7ff fdce 	bl	8000890 <Get_CAN_Error_String>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68f9      	ldr	r1, [r7, #12]
 8000cfa:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <HAL_FDCAN_ErrorCallback+0x94>)
 8000cfc:	f004 f938 	bl	8004f70 <iprintf>
    printf("  Total Errors: %lu\r\n", can_error_count);
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_FDCAN_ErrorCallback+0x88>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4815      	ldr	r0, [pc, #84]	@ (8000d5c <HAL_FDCAN_ErrorCallback+0x98>)
 8000d08:	f004 f932 	bl	8004f70 <iprintf>

    // Handle specific error conditions
    if (error_code & FDCAN_FLAG_BUS_OFF)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d016      	beq.n	8000d44 <HAL_FDCAN_ErrorCallback+0x80>
    {
        can_stats.bus_off_count++;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_FDCAN_ErrorCallback+0x8c>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d50 <HAL_FDCAN_ErrorCallback+0x8c>)
 8000d1e:	60d3      	str	r3, [r2, #12]
        printf("  Bus-Off condition detected! Attempting restart...\r\n");
 8000d20:	480f      	ldr	r0, [pc, #60]	@ (8000d60 <HAL_FDCAN_ErrorCallback+0x9c>)
 8000d22:	f004 f98d 	bl	8005040 <puts>

        // Attempt to restart CAN after bus-off
        HAL_FDCAN_Stop(hfdcan);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 ff48 	bl	8001bbc <HAL_FDCAN_Stop>
        HAL_Delay(100);  // Wait before restart
 8000d2c:	2064      	movs	r0, #100	@ 0x64
 8000d2e:	f000 fb77 	bl	8001420 <HAL_Delay>
        if (HAL_FDCAN_Start(hfdcan) == HAL_OK)
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 ff1a 	bl	8001b6c <HAL_FDCAN_Start>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <HAL_FDCAN_ErrorCallback+0x80>
        {
            printf("  CAN restarted successfully.\r\n");
 8000d3e:	4809      	ldr	r0, [pc, #36]	@ (8000d64 <HAL_FDCAN_ErrorCallback+0xa0>)
 8000d40:	f004 f97e 	bl	8005040 <puts>
        }
    }
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000f8 	.word	0x200000f8
 8000d50:	200000fc 	.word	0x200000fc
 8000d54:	08005fac 	.word	0x08005fac
 8000d58:	08005fc4 	.word	0x08005fc4
 8000d5c:	08005fe4 	.word	0x08005fe4
 8000d60:	08005ffc 	.word	0x08005ffc
 8000d64:	08006034 	.word	0x08006034

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <Error_Handler+0x8>

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d86:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000daa:	f001 fe67 	bl	8002a7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b09a      	sub	sp, #104	@ 0x68
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	2244      	movs	r2, #68	@ 0x44
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 fa0f 	bl	8005200 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a28      	ldr	r2, [pc, #160]	@ (8000e88 <HAL_FDCAN_MspInit+0xcc>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d149      	bne.n	8000e80 <HAL_FDCAN_MspInit+0xc4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000df2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000df6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 fb7b 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e08:	f7ff ffae 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <HAL_FDCAN_MspInit+0xd0>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e10:	4a1e      	ldr	r2, [pc, #120]	@ (8000e8c <HAL_FDCAN_MspInit+0xd0>)
 8000e12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <HAL_FDCAN_MspInit+0xd0>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_FDCAN_MspInit+0xd0>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e28:	4a18      	ldr	r2, [pc, #96]	@ (8000e8c <HAL_FDCAN_MspInit+0xd0>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e30:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_FDCAN_MspInit+0xd0>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e3c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e40:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e4e:	2309      	movs	r3, #9
 8000e50:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f001 fbb6 	bl	80025cc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2015      	movs	r0, #21
 8000e66:	f000 fbd8 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e6a:	2015      	movs	r0, #21
 8000e6c:	f000 fbef 	bl	800164e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2016      	movs	r0, #22
 8000e76:	f000 fbd0 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e7a:	2016      	movs	r0, #22
 8000e7c:	f000 fbe7 	bl	800164e <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000e80:	bf00      	nop
 8000e82:	3768      	adds	r7, #104	@ 0x68
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40006400 	.word	0x40006400
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09a      	sub	sp, #104	@ 0x68
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2244      	movs	r2, #68	@ 0x44
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 f9a5 	bl	8005200 <memset>
  if(huart->Instance==USART1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a22      	ldr	r2, [pc, #136]	@ (8000f44 <HAL_UART_MspInit+0xb4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d13d      	bne.n	8000f3c <HAL_UART_MspInit+0xac>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 fb13 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ed8:	f7ff ff46 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <HAL_UART_MspInit+0xb8>)
 8000ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee0:	4a19      	ldr	r2, [pc, #100]	@ (8000f48 <HAL_UART_MspInit+0xb8>)
 8000ee2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_UART_MspInit+0xb8>)
 8000eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_UART_MspInit+0xb8>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef8:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <HAL_UART_MspInit+0xb8>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_UART_MspInit+0xb8>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f0c:	2330      	movs	r3, #48	@ 0x30
 8000f0e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f24:	4619      	mov	r1, r3
 8000f26:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <HAL_UART_MspInit+0xbc>)
 8000f28:	f001 fb50 	bl	80025cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2025      	movs	r0, #37	@ 0x25
 8000f32:	f000 fb72 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f36:	2025      	movs	r0, #37	@ 0x25
 8000f38:	f000 fb89 	bl	800164e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3768      	adds	r7, #104	@ 0x68
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40013800 	.word	0x40013800
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48000800 	.word	0x48000800

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <NMI_Handler+0x4>

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <MemManage_Handler+0x4>

08000f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa6:	f000 fa1d 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <FDCAN1_IT0_IRQHandler+0x10>)
 8000fb6:	f001 f8a3 	bl	8002100 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000011c 	.word	0x2000011c

08000fc4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <FDCAN1_IT1_IRQHandler+0x10>)
 8000fca:	f001 f899 	bl	8002100 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000011c 	.word	0x2000011c

08000fd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <USART1_IRQHandler+0x10>)
 8000fde:	f002 fd59 	bl	8003a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000180 	.word	0x20000180

08000fec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00a      	b.n	8001014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffe:	f3af 8000 	nop.w
 8001002:	4601      	mov	r1, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf0      	blt.n	8000ffe <_read+0x12>
  }

  return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e009      	b.n	800104c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f915 	bl	8001270 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf1      	blt.n	8001038 <_write+0x12>
  }
  return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_close>:

int _close(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001086:	605a      	str	r2, [r3, #4]
  return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_isatty>:

int _isatty(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f004 f8d0 	bl	800529c <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20008000 	.word	0x20008000
 8001128:	00000400 	.word	0x00000400
 800112c:	20000218 	.word	0x20000218
 8001130:	20000408 	.word	0x20000408

08001134 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001158:	480d      	ldr	r0, [pc, #52]	@ (8001190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800115c:	f7ff ffea 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <LoopForever+0x6>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <LoopForever+0xe>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	@ (80011a4 <LoopForever+0x16>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f004 f88f 	bl	80052a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118a:	f7ff fbe3 	bl	8000954 <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   r0, =_estack
 8001190:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800119c:	080060e8 	.word	0x080060e8
  ldr r2, =_sbss
 80011a0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011a4:	20000404 	.word	0x20000404

080011a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC1_2_IRQHandler>
	...

080011ac <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d903      	bls.n	80011ca <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011c2:	f06f 0301 	mvn.w	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	e018      	b.n	80011fc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2294      	movs	r2, #148	@ 0x94
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <BSP_COM_Init+0x5c>)
 80011d4:	4413      	add	r3, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f866 	bl	80012a8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2294      	movs	r2, #148	@ 0x94
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <BSP_COM_Init+0x5c>)
 80011e6:	4413      	add	r3, r2
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f80e 	bl	800120c <MX_LPUART1_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80011f6:	f06f 0303 	mvn.w	r3, #3
 80011fa:	e000      	b.n	80011fe <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80011fc:	68fb      	ldr	r3, [r7, #12]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000021c 	.word	0x2000021c

0800120c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <MX_LPUART1_Init+0x60>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	220c      	movs	r2, #12
 800122a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	895b      	ldrh	r3, [r3, #10]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	891b      	ldrh	r3, [r3, #8]
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	899b      	ldrh	r3, [r3, #12]
 800124c:	461a      	mov	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001258:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f002 fb3c 	bl	80038d8 <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000004 	.word	0x20000004

08001270 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <__io_putchar+0x30>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	2394      	movs	r3, #148	@ 0x94
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <__io_putchar+0x34>)
 8001286:	1898      	adds	r0, r3, r2
 8001288:	1d39      	adds	r1, r7, #4
 800128a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128e:	2201      	movs	r2, #1
 8001290:	f002 fb72 	bl	8003978 <HAL_UART_Transmit>
  return ch;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200002b0 	.word	0x200002b0
 80012a4:	2000021c 	.word	0x2000021c

080012a8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <COM1_MspInit+0x94>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	4a21      	ldr	r2, [pc, #132]	@ (800133c <COM1_MspInit+0x94>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <COM1_MspInit+0x94>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <COM1_MspInit+0x94>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	4a1b      	ldr	r2, [pc, #108]	@ (800133c <COM1_MspInit+0x94>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d4:	4b19      	ldr	r3, [pc, #100]	@ (800133c <COM1_MspInit+0x94>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <COM1_MspInit+0x94>)
 80012e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e4:	4a15      	ldr	r2, [pc, #84]	@ (800133c <COM1_MspInit+0x94>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <COM1_MspInit+0x94>)
 80012ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80012f8:	2304      	movs	r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001308:	230c      	movs	r3, #12
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001316:	f001 f959 	bl	80025cc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800131a:	2308      	movs	r3, #8
 800131c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001322:	230c      	movs	r3, #12
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001330:	f001 f94c 	bl	80025cc <HAL_GPIO_Init>
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134a:	2003      	movs	r0, #3
 800134c:	f000 f95a 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001350:	2000      	movs	r0, #0
 8001352:	f000 f80d 	bl	8001370 <HAL_InitTick>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	e001      	b.n	8001366 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001362:	f7ff fd07 	bl	8000d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001366:	79fb      	ldrb	r3, [r7, #7]

}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_InitTick+0x68>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d022      	beq.n	80013ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_InitTick+0x6c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_InitTick+0x68>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001390:	fbb1 f3f3 	udiv	r3, r1, r3
 8001394:	fbb2 f3f3 	udiv	r3, r2, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f966 	bl	800166a <HAL_SYSTICK_Config>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10f      	bne.n	80013c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	d809      	bhi.n	80013be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013aa:	2200      	movs	r2, #0
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	f04f 30ff 	mov.w	r0, #4294967295
 80013b2:	f000 f932 	bl	800161a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <HAL_InitTick+0x70>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e007      	b.n	80013ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e004      	b.n	80013ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e001      	b.n	80013ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000000c 	.word	0x2000000c
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000008 	.word	0x20000008

080013e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_IncTick+0x1c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <HAL_IncTick+0x20>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a03      	ldr	r2, [pc, #12]	@ (8001400 <HAL_IncTick+0x1c>)
 80013f4:	6013      	str	r3, [r2, #0]
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	200002b4 	.word	0x200002b4
 8001404:	2000000c 	.word	0x2000000c

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	@ (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200002b4 	.word	0x200002b4

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d004      	beq.n	8001444 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_Delay+0x40>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001444:	bf00      	nop
 8001446:	f7ff ffdf 	bl	8001408 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	429a      	cmp	r2, r3
 8001454:	d8f7      	bhi.n	8001446 <HAL_Delay+0x26>
  {
  }
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000000c 	.word	0x2000000c

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	@ (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	@ (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	@ (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	@ 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff29 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff40 	bl	80014ac <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff90 	bl	8001558 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5f 	bl	8001504 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff33 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffa4 	bl	80015c0 <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d005      	beq.n	80016a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2204      	movs	r2, #4
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e037      	b.n	8001716 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 020e 	bic.w	r2, r2, #14
 80016b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0201 	bic.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	f003 021f 	and.w	r2, r3, #31
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00c      	beq.n	8001716 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001706:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800170a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001714:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d00d      	beq.n	8001768 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2204      	movs	r2, #4
 8001750:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	e047      	b.n	80017f8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 020e 	bic.w	r2, r2, #14
 8001776:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001792:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00c      	beq.n	80017d8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
    }
  }
  return status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e147      	b.n	8001aa6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fac6 	bl	8000dbc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0210 	bic.w	r2, r2, #16
 800183e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001840:	f7ff fde2 	bl	8001408 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001846:	e012      	b.n	800186e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001848:	f7ff fdde 	bl	8001408 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b0a      	cmp	r3, #10
 8001854:	d90b      	bls.n	800186e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e11b      	b.n	8001aa6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b08      	cmp	r3, #8
 800187a:	d0e5      	beq.n	8001848 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800188c:	f7ff fdbc 	bl	8001408 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001892:	e012      	b.n	80018ba <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001894:	f7ff fdb8 	bl	8001408 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b0a      	cmp	r3, #10
 80018a0:	d90b      	bls.n	80018ba <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2203      	movs	r2, #3
 80018b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0f5      	b.n	8001aa6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0e5      	beq.n	8001894 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0202 	orr.w	r2, r2, #2
 80018d6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a74      	ldr	r2, [pc, #464]	@ (8001ab0 <HAL_FDCAN_Init+0x2ac>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d103      	bne.n	80018ea <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80018e2:	4a74      	ldr	r2, [pc, #464]	@ (8001ab4 <HAL_FDCAN_Init+0x2b0>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7c1b      	ldrb	r3, [r3, #16]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d108      	bne.n	8001904 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699a      	ldr	r2, [r3, #24]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001900:	619a      	str	r2, [r3, #24]
 8001902:	e007      	b.n	8001914 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001912:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7c5b      	ldrb	r3, [r3, #17]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d108      	bne.n	800192e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699a      	ldr	r2, [r3, #24]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800192a:	619a      	str	r2, [r3, #24]
 800192c:	e007      	b.n	800193e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800193c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7c9b      	ldrb	r3, [r3, #18]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001954:	619a      	str	r2, [r3, #24]
 8001956:	e007      	b.n	8001968 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001966:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699a      	ldr	r2, [r3, #24]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800198c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0210 	bic.w	r2, r2, #16
 800199c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0204 	orr.w	r2, r2, #4
 80019b4:	619a      	str	r2, [r3, #24]
 80019b6:	e02c      	b.n	8001a12 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d028      	beq.n	8001a12 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d01c      	beq.n	8001a02 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019d6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0210 	orr.w	r2, r2, #16
 80019e6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d110      	bne.n	8001a12 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0220 	orr.w	r2, r2, #32
 80019fe:	619a      	str	r2, [r3, #24]
 8001a00:	e007      	b.n	8001a12 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0220 	orr.w	r2, r2, #32
 8001a10:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a22:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a2a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a3a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a3c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a46:	d115      	bne.n	8001a74 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a52:	3b01      	subs	r3, #1
 8001a54:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a56:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a60:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a70:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a72:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fccc 	bl	8002428 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40006400 	.word	0x40006400
 8001ab4:	40006500 	.word	0x40006500

08001ab8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ac8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d002      	beq.n	8001ad6 <HAL_FDCAN_ConfigFilter+0x1e>
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d13d      	bne.n	8001b52 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d119      	bne.n	8001b12 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001aea:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001af2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e01d      	b.n	8001b4e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	075a      	lsls	r2, r3, #29
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	079a      	lsls	r2, r3, #30
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3304      	adds	r3, #4
 8001b46:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e006      	b.n	8001b60 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b56:	f043 0202 	orr.w	r2, r3, #2
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
  }
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d110      	bne.n	8001ba2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e006      	b.n	8001bb0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	f043 0204 	orr.w	r2, r3, #4
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
  }
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d156      	bne.n	8001c82 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001be4:	e011      	b.n	8001c0a <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b0a      	cmp	r3, #10
 8001bea:	d90b      	bls.n	8001c04 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf0:	f043 0201 	orr.w	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e045      	b.n	8001c90 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0e6      	beq.n	8001be6 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0210 	bic.w	r2, r2, #16
 8001c2a:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001c2c:	e011      	b.n	8001c52 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b0a      	cmp	r3, #10
 8001c32:	d90b      	bls.n	8001c4c <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e021      	b.n	8001c90 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d0e6      	beq.n	8001c2e <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0202 	orr.w	r2, r2, #2
 8001c6e:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Return function status */
    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e006      	b.n	8001c90 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	f043 0208 	orr.w	r2, r3, #8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d12c      	bne.n	8001d0e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e023      	b.n	8001d1c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fbf2 	bl	80024d4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001d00:	2201      	movs	r2, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e006      	b.n	8001d1c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d12:	f043 0208 	orr.w	r2, r3, #8
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b08b      	sub	sp, #44	@ 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d3c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001d3e:	7efb      	ldrb	r3, [r7, #27]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	f040 80e8 	bne.w	8001f16 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b40      	cmp	r3, #64	@ 0x40
 8001d4a:	d137      	bne.n	8001dbc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d107      	bne.n	8001d6c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0db      	b.n	8001f24 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d7c:	d10a      	bne.n	8001d94 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d8e:	d101      	bne.n	8001d94 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001d90:	2301      	movs	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	4413      	add	r3, r2
 8001da6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dba:	e036      	b.n	8001e2a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0a3      	b.n	8001f24 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dec:	d10a      	bne.n	8001e04 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dfe:	d101      	bne.n	8001e04 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4413      	add	r3, r2
 8001e16:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d107      	bne.n	8001e4e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0c9b      	lsrs	r3, r3, #18
 8001e44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e005      	b.n	8001e5a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	3304      	adds	r3, #4
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0e1b      	lsrs	r3, r3, #24
 8001eae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0fda      	lsrs	r2, r3, #31
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	e00a      	b.n	8001ee6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	441a      	add	r2, r3
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	440b      	add	r3, r1
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4a11      	ldr	r2, [pc, #68]	@ (8001f30 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d3ec      	bcc.n	8001ed0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b40      	cmp	r3, #64	@ 0x40
 8001efa:	d105      	bne.n	8001f08 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001f06:	e004      	b.n	8001f12 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e006      	b.n	8001f24 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1a:	f043 0208 	orr.w	r2, r3, #8
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
  }
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	372c      	adds	r7, #44	@ 0x2c
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	0800606c 	.word	0x0800606c

08001f34 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f46:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d003      	beq.n	8001f56 <HAL_FDCAN_ActivateNotification+0x22>
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	f040 80c8 	bne.w	80020e6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d03b      	beq.n	8001fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d031      	beq.n	8001fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d027      	beq.n	8001fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01d      	beq.n	8001fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d004      	beq.n	8001fc2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d013      	beq.n	8001fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00c      	beq.n	8001ffa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d107      	bne.n	8001ffa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d13b      	bne.n	8002086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d131      	bne.n	8002086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d127      	bne.n	8002086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d11d      	bne.n	8002086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d113      	bne.n	8002086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00c      	beq.n	8002096 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0202 	orr.w	r2, r2, #2
 8002094:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	430a      	orrs	r2, r1
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e006      	b.n	80020f4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ea:	f043 0202 	orr.w	r2, r3, #2
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
  }
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	@ 0x30
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800211c:	4013      	ands	r3, r2
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002134:	4013      	ands	r3, r2
 8002136:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214c:	4013      	ands	r3, r2
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002156:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800215a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	6a3a      	ldr	r2, [r7, #32]
 8002164:	4013      	ands	r3, r2
 8002166:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002172:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	4013      	ands	r3, r2
 800217e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002186:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	099b      	lsrs	r3, r3, #6
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00c      	beq.n	80021b6 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	099b      	lsrs	r3, r3, #6
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2240      	movs	r2, #64	@ 0x40
 80021ae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f917 	bl	80023e4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01a      	beq.n	80021f8 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d014      	beq.n	80021f8 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021d6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80021f0:	6939      	ldr	r1, [r7, #16]
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8d7 	bl	80023a6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80021f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002204:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7fe fd4b 	bl	8000ca4 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800220e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800221a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800221c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fd20 	bl	8000c64 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002230:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f896 	bl	8002366 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	0a5b      	lsrs	r3, r3, #9
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	0a5b      	lsrs	r3, r3, #9
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800225a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f88d 	bl	800237c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	09db      	lsrs	r3, r3, #7
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d019      	beq.n	80022a2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	09db      	lsrs	r3, r3, #7
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d013      	beq.n	80022a2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002282:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2280      	movs	r2, #128	@ 0x80
 8002298:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800229a:	68f9      	ldr	r1, [r7, #12]
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f877 	bl	8002390 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	0b5b      	lsrs	r3, r3, #13
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	0b5b      	lsrs	r3, r3, #13
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f879 	bl	80023bc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	0bdb      	lsrs	r3, r3, #15
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	0bdb      	lsrs	r3, r3, #15
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f86f 	bl	80023d0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	0b9b      	lsrs	r3, r3, #14
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d010      	beq.n	8002320 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	0b9b      	lsrs	r3, r3, #14
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002312:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002318:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800232e:	69f9      	ldr	r1, [r7, #28]
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f861 	bl	80023f8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7fe fcb3 	bl	8000cc4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800235e:	bf00      	nop
 8002360:	3730      	adds	r7, #48	@ 0x30
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(const FDCAN_HandleTypeDef *hfdcan)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002430:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002432:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002442:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244a:	041a      	lsls	r2, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002468:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002470:	061a      	lsls	r2, r3, #24
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e005      	b.n	80024b6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3304      	adds	r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3f3      	bcc.n	80024aa <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	4000a400 	.word	0x4000a400

080024d4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	@ 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80024f2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e00a      	b.n	8002516 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002508:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800250e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002514:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002520:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002526:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800252c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	3304      	adds	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	3304      	adds	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e020      	b.n	80025aa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3303      	adds	r3, #3
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3302      	adds	r3, #2
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	440b      	add	r3, r1
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002580:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3301      	adds	r3, #1
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	440b      	add	r3, r1
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800258e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	440a      	add	r2, r1
 8002596:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002598:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	3304      	adds	r3, #4
 80025a2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3304      	adds	r3, #4
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4a06      	ldr	r2, [pc, #24]	@ (80025c8 <FDCAN_CopyMessageToRAM+0xf4>)
 80025b0:	5cd3      	ldrb	r3, [r2, r3]
 80025b2:	461a      	mov	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d3d6      	bcc.n	8002568 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	3724      	adds	r7, #36	@ 0x24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	0800606c 	.word	0x0800606c

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025da:	e15a      	b.n	8002892 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 814c 	beq.w	800288c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d005      	beq.n	800260c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002608:	2b02      	cmp	r3, #2
 800260a:	d130      	bne.n	800266e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002642:	2201      	movs	r2, #1
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0201 	and.w	r2, r3, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b03      	cmp	r3, #3
 8002678:	d017      	beq.n	80026aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d123      	bne.n	80026fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	6939      	ldr	r1, [r7, #16]
 80026fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0203 	and.w	r2, r3, #3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80a6 	beq.w	800288c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002740:	4b5b      	ldr	r3, [pc, #364]	@ (80028b0 <HAL_GPIO_Init+0x2e4>)
 8002742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002744:	4a5a      	ldr	r2, [pc, #360]	@ (80028b0 <HAL_GPIO_Init+0x2e4>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6613      	str	r3, [r2, #96]	@ 0x60
 800274c:	4b58      	ldr	r3, [pc, #352]	@ (80028b0 <HAL_GPIO_Init+0x2e4>)
 800274e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002758:	4a56      	ldr	r2, [pc, #344]	@ (80028b4 <HAL_GPIO_Init+0x2e8>)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002782:	d01f      	beq.n	80027c4 <HAL_GPIO_Init+0x1f8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a4c      	ldr	r2, [pc, #304]	@ (80028b8 <HAL_GPIO_Init+0x2ec>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d019      	beq.n	80027c0 <HAL_GPIO_Init+0x1f4>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a4b      	ldr	r2, [pc, #300]	@ (80028bc <HAL_GPIO_Init+0x2f0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_GPIO_Init+0x1f0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_GPIO_Init+0x2f4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00d      	beq.n	80027b8 <HAL_GPIO_Init+0x1ec>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a49      	ldr	r2, [pc, #292]	@ (80028c4 <HAL_GPIO_Init+0x2f8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_Init+0x1e8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a48      	ldr	r2, [pc, #288]	@ (80028c8 <HAL_GPIO_Init+0x2fc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_GPIO_Init+0x1e4>
 80027ac:	2305      	movs	r3, #5
 80027ae:	e00a      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027b0:	2306      	movs	r3, #6
 80027b2:	e008      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027b4:	2304      	movs	r3, #4
 80027b6:	e006      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027b8:	2303      	movs	r3, #3
 80027ba:	e004      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027bc:	2302      	movs	r3, #2
 80027be:	e002      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027c4:	2300      	movs	r3, #0
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	f002 0203 	and.w	r2, r2, #3
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	4093      	lsls	r3, r2
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d6:	4937      	ldr	r1, [pc, #220]	@ (80028b4 <HAL_GPIO_Init+0x2e8>)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e4:	4b39      	ldr	r3, [pc, #228]	@ (80028cc <HAL_GPIO_Init+0x300>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002808:	4a30      	ldr	r2, [pc, #192]	@ (80028cc <HAL_GPIO_Init+0x300>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800280e:	4b2f      	ldr	r3, [pc, #188]	@ (80028cc <HAL_GPIO_Init+0x300>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002832:	4a26      	ldr	r2, [pc, #152]	@ (80028cc <HAL_GPIO_Init+0x300>)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002838:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <HAL_GPIO_Init+0x300>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800285c:	4a1b      	ldr	r2, [pc, #108]	@ (80028cc <HAL_GPIO_Init+0x300>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002862:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_GPIO_Init+0x300>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002886:	4a11      	ldr	r2, [pc, #68]	@ (80028cc <HAL_GPIO_Init+0x300>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	f47f ae9d 	bne.w	80025dc <HAL_GPIO_Init+0x10>
  }
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	48000400 	.word	0x48000400
 80028bc:	48000800 	.word	0x48000800
 80028c0:	48000c00 	.word	0x48000c00
 80028c4:	48001000 	.word	0x48001000
 80028c8:	48001400 	.word	0x48001400
 80028cc:	40010400 	.word	0x40010400

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	041a      	lsls	r2, r3, #16
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43d9      	mvns	r1, r3
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	400b      	ands	r3, r1
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d141      	bne.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002942:	4b4b      	ldr	r3, [pc, #300]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294e:	d131      	bne.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002950:	4b47      	ldr	r3, [pc, #284]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002956:	4a46      	ldr	r2, [pc, #280]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800295c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002960:	4b43      	ldr	r3, [pc, #268]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002968:	4a41      	ldr	r2, [pc, #260]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800296e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002970:	4b40      	ldr	r3, [pc, #256]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2232      	movs	r2, #50	@ 0x32
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	0c9b      	lsrs	r3, r3, #18
 8002982:	3301      	adds	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002986:	e002      	b.n	800298e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3b01      	subs	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800298e:	4b38      	ldr	r3, [pc, #224]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299a:	d102      	bne.n	80029a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f2      	bne.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a2:	4b33      	ldr	r3, [pc, #204]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ae:	d158      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e057      	b.n	8002a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029c4:	e04d      	b.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029cc:	d141      	bne.n	8002a52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ce:	4b28      	ldr	r3, [pc, #160]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029da:	d131      	bne.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029dc:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029e2:	4a23      	ldr	r2, [pc, #140]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ec:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2232      	movs	r2, #50	@ 0x32
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	4a1c      	ldr	r2, [pc, #112]	@ (8002a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a12:	e002      	b.n	8002a1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a26:	d102      	bne.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f2      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a2e:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3a:	d112      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e011      	b.n	8002a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a46:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a50:	e007      	b.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a52:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a5a:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40007000 	.word	0x40007000
 8002a74:	20000000 	.word	0x20000000
 8002a78:	431bde83 	.word	0x431bde83

08002a7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a04      	ldr	r2, [pc, #16]	@ (8002a98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a8a:	6093      	str	r3, [r2, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40007000 	.word	0x40007000

08002a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e2fe      	b.n	80030ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d075      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aba:	4b97      	ldr	r3, [pc, #604]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac4:	4b94      	ldr	r3, [pc, #592]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_OscConfig+0x3e>
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d002      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x44>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d10b      	bne.n	8002af8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	4b8d      	ldr	r3, [pc, #564]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d05b      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x108>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d157      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e2d9      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b00:	d106      	bne.n	8002b10 <HAL_RCC_OscConfig+0x74>
 8002b02:	4b85      	ldr	r3, [pc, #532]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a84      	ldr	r2, [pc, #528]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e01d      	b.n	8002b4c <HAL_RCC_OscConfig+0xb0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x98>
 8002b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b7c      	ldr	r3, [pc, #496]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7b      	ldr	r2, [pc, #492]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0xb0>
 8002b34:	4b78      	ldr	r3, [pc, #480]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a77      	ldr	r2, [pc, #476]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b75      	ldr	r3, [pc, #468]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a74      	ldr	r2, [pc, #464]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fc58 	bl	8001408 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7fe fc54 	bl	8001408 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	@ 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e29e      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0xc0>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fc44 	bl	8001408 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7fe fc40 	bl	8001408 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	@ 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e28a      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b96:	4b60      	ldr	r3, [pc, #384]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0xe8>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d075      	beq.n	8002c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb2:	4b59      	ldr	r3, [pc, #356]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bbc:	4b56      	ldr	r3, [pc, #344]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d102      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x136>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x13c>
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d11f      	bne.n	8002c18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x154>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e25d      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b49      	ldr	r3, [pc, #292]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	4946      	ldr	r1, [pc, #280]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c04:	4b45      	ldr	r3, [pc, #276]	@ (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fbb1 	bl	8001370 <HAL_InitTick>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d043      	beq.n	8002c9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e249      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d023      	beq.n	8002c68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b3d      	ldr	r3, [pc, #244]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a3c      	ldr	r2, [pc, #240]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fbec 	bl	8001408 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c34:	f7fe fbe8 	bl	8001408 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e232      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c46:	4b34      	ldr	r3, [pc, #208]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b31      	ldr	r3, [pc, #196]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	061b      	lsls	r3, r3, #24
 8002c60:	492d      	ldr	r1, [pc, #180]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
 8002c66:	e01a      	b.n	8002c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c68:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002c6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fbc8 	bl	8001408 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fbc4 	bl	8001408 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e20e      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c8e:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x1e0>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d041      	beq.n	8002d2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01c      	beq.n	8002cec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb2:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb8:	4a17      	ldr	r2, [pc, #92]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fba1 	bl	8001408 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cca:	f7fe fb9d 	bl	8001408 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e1e7      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0ef      	beq.n	8002cca <HAL_RCC_OscConfig+0x22e>
 8002cea:	e020      	b.n	8002d2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cec:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf2:	4a09      	ldr	r2, [pc, #36]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe fb84 	bl	8001408 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d02:	e00d      	b.n	8002d20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fe fb80 	bl	8001408 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d906      	bls.n	8002d20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1ca      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d20:	4b8c      	ldr	r3, [pc, #560]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ea      	bne.n	8002d04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80a6 	beq.w	8002e88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d40:	4b84      	ldr	r3, [pc, #528]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2b4>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x2b6>
 8002d50:	2300      	movs	r3, #0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	4b7f      	ldr	r3, [pc, #508]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d62:	4b7c      	ldr	r3, [pc, #496]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d72:	4b79      	ldr	r3, [pc, #484]	@ (8002f58 <HAL_RCC_OscConfig+0x4bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d7e:	4b76      	ldr	r3, [pc, #472]	@ (8002f58 <HAL_RCC_OscConfig+0x4bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a75      	ldr	r2, [pc, #468]	@ (8002f58 <HAL_RCC_OscConfig+0x4bc>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fb3d 	bl	8001408 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fe fb39 	bl	8001408 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e183      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da4:	4b6c      	ldr	r3, [pc, #432]	@ (8002f58 <HAL_RCC_OscConfig+0x4bc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d108      	bne.n	8002dca <HAL_RCC_OscConfig+0x32e>
 8002db8:	4b66      	ldr	r3, [pc, #408]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	4a65      	ldr	r2, [pc, #404]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc8:	e024      	b.n	8002e14 <HAL_RCC_OscConfig+0x378>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d110      	bne.n	8002df4 <HAL_RCC_OscConfig+0x358>
 8002dd2:	4b60      	ldr	r3, [pc, #384]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd8:	4a5e      	ldr	r2, [pc, #376]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002de2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002df2:	e00f      	b.n	8002e14 <HAL_RCC_OscConfig+0x378>
 8002df4:	4b57      	ldr	r3, [pc, #348]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfa:	4a56      	ldr	r2, [pc, #344]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e04:	4b53      	ldr	r3, [pc, #332]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	4a52      	ldr	r2, [pc, #328]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002e0c:	f023 0304 	bic.w	r3, r3, #4
 8002e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d016      	beq.n	8002e4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe faf4 	bl	8001408 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e24:	f7fe faf0 	bl	8001408 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e138      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3a:	4b46      	ldr	r3, [pc, #280]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ed      	beq.n	8002e24 <HAL_RCC_OscConfig+0x388>
 8002e48:	e015      	b.n	8002e76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fadd 	bl	8001408 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe fad9 	bl	8001408 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e121      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e68:	4b3a      	ldr	r3, [pc, #232]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ed      	bne.n	8002e52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e76:	7ffb      	ldrb	r3, [r7, #31]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b35      	ldr	r3, [pc, #212]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	4a34      	ldr	r2, [pc, #208]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d03c      	beq.n	8002f0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01c      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe faac 	bl	8001408 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eb4:	f7fe faa8 	bl	8001408 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0f2      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ec6:	4b23      	ldr	r3, [pc, #140]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ef      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x418>
 8002ed4:	e01b      	b.n	8002f0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002edc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fa8f 	bl	8001408 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eee:	f7fe fa8b 	bl	8001408 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0d5      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f00:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ef      	bne.n	8002eee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80c9 	beq.w	80030aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f18:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	f000 8083 	beq.w	800302c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d15e      	bne.n	8002fec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a08      	ldr	r2, [pc, #32]	@ (8002f54 <HAL_RCC_OscConfig+0x4b8>)
 8002f34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fa65 	bl	8001408 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	e00c      	b.n	8002f5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe fa61 	bl	8001408 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d905      	bls.n	8002f5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0ab      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5c:	4b55      	ldr	r3, [pc, #340]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ec      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f68:	4b52      	ldr	r3, [pc, #328]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	4b52      	ldr	r3, [pc, #328]	@ (80030b8 <HAL_RCC_OscConfig+0x61c>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6a11      	ldr	r1, [r2, #32]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f78:	3a01      	subs	r2, #1
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f82:	0212      	lsls	r2, r2, #8
 8002f84:	4311      	orrs	r1, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	0552      	lsls	r2, r2, #21
 8002f90:	4311      	orrs	r1, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f96:	0852      	lsrs	r2, r2, #1
 8002f98:	3a01      	subs	r2, #1
 8002f9a:	0652      	lsls	r2, r2, #25
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fa2:	06d2      	lsls	r2, r2, #27
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	4943      	ldr	r1, [pc, #268]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	4b41      	ldr	r3, [pc, #260]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a40      	ldr	r2, [pc, #256]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002fb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a3d      	ldr	r2, [pc, #244]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fa20 	bl	8001408 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe fa1c 	bl	8001408 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e066      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	4b35      	ldr	r3, [pc, #212]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x530>
 8002fea:	e05e      	b.n	80030aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fec:	4b31      	ldr	r3, [pc, #196]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a30      	ldr	r2, [pc, #192]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8002ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fa06 	bl	8001408 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe fa02 	bl	8001408 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e04c      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003012:	4b28      	ldr	r3, [pc, #160]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800301e:	4b25      	ldr	r3, [pc, #148]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	4924      	ldr	r1, [pc, #144]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 8003024:	4b25      	ldr	r3, [pc, #148]	@ (80030bc <HAL_RCC_OscConfig+0x620>)
 8003026:	4013      	ands	r3, r2
 8003028:	60cb      	str	r3, [r1, #12]
 800302a:	e03e      	b.n	80030aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e039      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003038:	4b1e      	ldr	r3, [pc, #120]	@ (80030b4 <HAL_RCC_OscConfig+0x618>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0203 	and.w	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	429a      	cmp	r2, r3
 800304a:	d12c      	bne.n	80030a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d123      	bne.n	80030a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d11b      	bne.n	80030a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d113      	bne.n	80030a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	3b01      	subs	r3, #1
 800308c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	019f800c 	.word	0x019f800c
 80030bc:	feeefffc 	.word	0xfeeefffc

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e11e      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b91      	ldr	r3, [pc, #580]	@ (8003320 <HAL_RCC_ClockConfig+0x260>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d910      	bls.n	8003108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b8e      	ldr	r3, [pc, #568]	@ (8003320 <HAL_RCC_ClockConfig+0x260>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 020f 	bic.w	r2, r3, #15
 80030ee:	498c      	ldr	r1, [pc, #560]	@ (8003320 <HAL_RCC_ClockConfig+0x260>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003320 <HAL_RCC_ClockConfig+0x260>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e106      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d073      	beq.n	80031fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d129      	bne.n	8003170 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311c:	4b81      	ldr	r3, [pc, #516]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0f4      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800312c:	f000 f99e 	bl	800346c <RCC_GetSysClockFreqFromPLLSource>
 8003130:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4a7c      	ldr	r2, [pc, #496]	@ (8003328 <HAL_RCC_ClockConfig+0x268>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d93f      	bls.n	80031ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800313a:	4b7a      	ldr	r3, [pc, #488]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	d033      	beq.n	80031ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12f      	bne.n	80031ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800315a:	4b72      	ldr	r3, [pc, #456]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003162:	4a70      	ldr	r2, [pc, #448]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 8003164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003168:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e024      	b.n	80031ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d107      	bne.n	8003188 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003178:	4b6a      	ldr	r3, [pc, #424]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d109      	bne.n	8003198 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0c6      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003188:	4b66      	ldr	r3, [pc, #408]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0be      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003198:	f000 f8ce 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 800319c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4a61      	ldr	r2, [pc, #388]	@ (8003328 <HAL_RCC_ClockConfig+0x268>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d909      	bls.n	80031ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031b6:	2380      	movs	r3, #128	@ 0x80
 80031b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f023 0203 	bic.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4957      	ldr	r1, [pc, #348]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031cc:	f7fe f91c 	bl	8001408 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d4:	f7fe f918 	bl	8001408 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e095      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 020c 	and.w	r2, r3, #12
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d1eb      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003214:	4b43      	ldr	r3, [pc, #268]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a42      	ldr	r2, [pc, #264]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800321a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800321e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800322c:	4b3d      	ldr	r3, [pc, #244]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003234:	4a3b      	ldr	r2, [pc, #236]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 8003236:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800323a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323c:	4b39      	ldr	r3, [pc, #228]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4936      	ldr	r1, [pc, #216]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
 800324e:	e008      	b.n	8003262 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b80      	cmp	r3, #128	@ 0x80
 8003254:	d105      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003256:	4b33      	ldr	r3, [pc, #204]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4a32      	ldr	r2, [pc, #200]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 800325c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003260:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003262:	4b2f      	ldr	r3, [pc, #188]	@ (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d21d      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003270:	4b2b      	ldr	r3, [pc, #172]	@ (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 020f 	bic.w	r2, r3, #15
 8003278:	4929      	ldr	r1, [pc, #164]	@ (8003320 <HAL_RCC_ClockConfig+0x260>)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003280:	f7fe f8c2 	bl	8001408 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7fe f8be 	bl	8001408 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e03b      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b20      	ldr	r3, [pc, #128]	@ (8003320 <HAL_RCC_ClockConfig+0x260>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1ed      	bne.n	8003288 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4917      	ldr	r1, [pc, #92]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d6:	4b13      	ldr	r3, [pc, #76]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	490f      	ldr	r1, [pc, #60]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ea:	f000 f825 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	490c      	ldr	r1, [pc, #48]	@ (800332c <HAL_RCC_ClockConfig+0x26c>)
 80032fc:	5ccb      	ldrb	r3, [r1, r3]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	fa22 f303 	lsr.w	r3, r2, r3
 8003306:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <HAL_RCC_ClockConfig+0x270>)
 8003308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800330a:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <HAL_RCC_ClockConfig+0x274>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe f82e 	bl	8001370 <HAL_InitTick>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40022000 	.word	0x40022000
 8003324:	40021000 	.word	0x40021000
 8003328:	04c4b400 	.word	0x04c4b400
 800332c:	08006054 	.word	0x08006054
 8003330:	20000000 	.word	0x20000000
 8003334:	20000008 	.word	0x20000008

08003338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800333e:	4b2c      	ldr	r3, [pc, #176]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b04      	cmp	r3, #4
 8003348:	d102      	bne.n	8003350 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800334a:	4b2a      	ldr	r3, [pc, #168]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e047      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003350:	4b27      	ldr	r3, [pc, #156]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d102      	bne.n	8003362 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800335c:	4b26      	ldr	r3, [pc, #152]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	e03e      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003362:	4b23      	ldr	r3, [pc, #140]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d136      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800336e:	4b20      	ldr	r3, [pc, #128]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003378:	4b1d      	ldr	r3, [pc, #116]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3301      	adds	r3, #1
 8003384:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d10c      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800338c:	4a1a      	ldr	r2, [pc, #104]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	4a16      	ldr	r2, [pc, #88]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003396:	68d2      	ldr	r2, [r2, #12]
 8003398:	0a12      	lsrs	r2, r2, #8
 800339a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	617b      	str	r3, [r7, #20]
      break;
 80033a4:	e00c      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033a6:	4a13      	ldr	r2, [pc, #76]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	4a10      	ldr	r2, [pc, #64]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b0:	68d2      	ldr	r2, [r2, #12]
 80033b2:	0a12      	lsrs	r2, r2, #8
 80033b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033b8:	fb02 f303 	mul.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
      break;
 80033be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0e5b      	lsrs	r3, r3, #25
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e001      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033e0:	693b      	ldr	r3, [r7, #16]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	016e3600 	.word	0x016e3600

080033fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	@ (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000000 	.word	0x20000000

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4904      	ldr	r1, [pc, #16]	@ (800343c <HAL_RCC_GetPCLK1Freq+0x28>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	08006064 	.word	0x08006064

08003440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003444:	f7ff ffda 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0adb      	lsrs	r3, r3, #11
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	4904      	ldr	r1, [pc, #16]	@ (8003468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	08006064 	.word	0x08006064

0800346c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003472:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800347c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3301      	adds	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d10c      	bne.n	80034aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003490:	4a17      	ldr	r2, [pc, #92]	@ (80034f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	0a12      	lsrs	r2, r2, #8
 800349e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
    break;
 80034a8:	e00c      	b.n	80034c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034aa:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4a0e      	ldr	r2, [pc, #56]	@ (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	0a12      	lsrs	r2, r2, #8
 80034b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
    break;
 80034c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0e5b      	lsrs	r3, r3, #25
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034de:	687b      	ldr	r3, [r7, #4]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40021000 	.word	0x40021000
 80034f0:	016e3600 	.word	0x016e3600
 80034f4:	00f42400 	.word	0x00f42400

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003500:	2300      	movs	r3, #0
 8003502:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003504:	2300      	movs	r3, #0
 8003506:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8098 	beq.w	8003646 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b43      	ldr	r3, [pc, #268]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b40      	ldr	r3, [pc, #256]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352a:	4a3f      	ldr	r2, [pc, #252]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003530:	6593      	str	r3, [r2, #88]	@ 0x58
 8003532:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003542:	4b3a      	ldr	r3, [pc, #232]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a39      	ldr	r2, [pc, #228]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800354e:	f7fd ff5b 	bl	8001408 <HAL_GetTick>
 8003552:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003554:	e009      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fd ff57 	bl	8001408 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d902      	bls.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	74fb      	strb	r3, [r7, #19]
        break;
 8003568:	e005      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800356a:	4b30      	ldr	r3, [pc, #192]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ef      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d159      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800357c:	4b2a      	ldr	r3, [pc, #168]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003586:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01e      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	d019      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003598:	4b23      	ldr	r3, [pc, #140]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a4:	4b20      	ldr	r3, [pc, #128]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c4:	4a18      	ldr	r2, [pc, #96]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fd ff17 	bl	8001408 <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035dc:	e00b      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fd ff13 	bl	8001408 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d902      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	74fb      	strb	r3, [r7, #19]
            break;
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ec      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360a:	4b07      	ldr	r3, [pc, #28]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003610:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003620:	e008      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	74bb      	strb	r3, [r7, #18]
 8003626:	e005      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003634:	7c7b      	ldrb	r3, [r7, #17]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4ba6      	ldr	r3, [pc, #664]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	4aa5      	ldr	r2, [pc, #660]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003652:	4ba0      	ldr	r3, [pc, #640]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003658:	f023 0203 	bic.w	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	499c      	ldr	r1, [pc, #624]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003674:	4b97      	ldr	r3, [pc, #604]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367a:	f023 020c 	bic.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4994      	ldr	r1, [pc, #592]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003696:	4b8f      	ldr	r3, [pc, #572]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	498b      	ldr	r1, [pc, #556]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036b8:	4b86      	ldr	r3, [pc, #536]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	4983      	ldr	r1, [pc, #524]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036da:	4b7e      	ldr	r3, [pc, #504]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	497a      	ldr	r1, [pc, #488]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036fc:	4b75      	ldr	r3, [pc, #468]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003702:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	4972      	ldr	r1, [pc, #456]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800371e:	4b6d      	ldr	r3, [pc, #436]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003724:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4969      	ldr	r1, [pc, #420]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003740:	4b64      	ldr	r3, [pc, #400]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003746:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4961      	ldr	r1, [pc, #388]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003762:	4b5c      	ldr	r3, [pc, #368]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003768:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	4958      	ldr	r1, [pc, #352]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003784:	4b53      	ldr	r3, [pc, #332]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	4950      	ldr	r1, [pc, #320]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037a2:	d105      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a4:	4b4b      	ldr	r3, [pc, #300]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4a4a      	ldr	r2, [pc, #296]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ae:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d015      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037bc:	4b45      	ldr	r3, [pc, #276]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	4942      	ldr	r1, [pc, #264]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037da:	d105      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037dc:	4b3d      	ldr	r3, [pc, #244]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a3c      	ldr	r2, [pc, #240]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037f4:	4b37      	ldr	r3, [pc, #220]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	4934      	ldr	r1, [pc, #208]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003812:	d105      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003814:	4b2f      	ldr	r3, [pc, #188]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4a2e      	ldr	r2, [pc, #184]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800381e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800382c:	4b29      	ldr	r3, [pc, #164]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383a:	4926      	ldr	r1, [pc, #152]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800384a:	d105      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384c:	4b21      	ldr	r3, [pc, #132]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a20      	ldr	r2, [pc, #128]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003856:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d015      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003864:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003872:	4918      	ldr	r1, [pc, #96]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003882:	d105      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003884:	4b13      	ldr	r3, [pc, #76]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a12      	ldr	r2, [pc, #72]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800388e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800389c:	4b0d      	ldr	r3, [pc, #52]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038aa:	490a      	ldr	r1, [pc, #40]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ba:	d105      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a04      	ldr	r2, [pc, #16]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80038c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e042      	b.n	8003970 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7fd fac7 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2224      	movs	r2, #36	@ 0x24
 8003906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fee4 	bl	80046f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fc15 	bl	8004158 <UART_SetConfig>
 800392e:	4603      	mov	r3, r0
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e01b      	b.n	8003970 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 ff63 	bl	8004834 <UART_CheckIdleState>
 800396e:	4603      	mov	r3, r0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398e:	2b20      	cmp	r3, #32
 8003990:	d17b      	bne.n	8003a8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_UART_Transmit+0x26>
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e074      	b.n	8003a8c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2221      	movs	r2, #33	@ 0x21
 80039ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039b2:	f7fd fd29 	bl	8001408 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d0:	d108      	bne.n	80039e4 <HAL_UART_Transmit+0x6c>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e003      	b.n	80039ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039ec:	e030      	b.n	8003a50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2180      	movs	r1, #128	@ 0x80
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 ffc5 	bl	8004988 <UART_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e03d      	b.n	8003a8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10b      	bne.n	8003a2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	3302      	adds	r3, #2
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e007      	b.n	8003a3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1c8      	bne.n	80039ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2200      	movs	r2, #0
 8003a64:	2140      	movs	r1, #64	@ 0x40
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 ff8e 	bl	8004988 <UART_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e006      	b.n	8003a8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b0ba      	sub	sp, #232	@ 0xe8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003aba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003abe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11b      	bne.n	8003b08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8300 	beq.w	80040fe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
      }
      return;
 8003b06:	e2fa      	b.n	80040fe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8123 	beq.w	8003d58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003b12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003b16:	4b8d      	ldr	r3, [pc, #564]	@ (8003d4c <HAL_UART_IRQHandler+0x2b8>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003b1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b22:	4b8b      	ldr	r3, [pc, #556]	@ (8003d50 <HAL_UART_IRQHandler+0x2bc>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8116 	beq.w	8003d58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d011      	beq.n	8003b5c <HAL_UART_IRQHandler+0xc8>
 8003b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d011      	beq.n	8003b8c <HAL_UART_IRQHandler+0xf8>
 8003b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00b      	beq.n	8003b8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	f043 0204 	orr.w	r2, r3, #4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d011      	beq.n	8003bbc <HAL_UART_IRQHandler+0x128>
 8003b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d017      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d105      	bne.n	8003be0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003bd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8003d4c <HAL_UART_IRQHandler+0x2b8>)
 8003bda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2208      	movs	r2, #8
 8003be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bee:	f043 0208 	orr.w	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d012      	beq.n	8003c2a <HAL_UART_IRQHandler+0x196>
 8003c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00c      	beq.n	8003c2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8266 	beq.w	8004102 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d013      	beq.n	8003c6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d105      	bne.n	8003c5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d054      	beq.n	8003d38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fee7 	bl	8004a62 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ca0:	d146      	bne.n	8003d30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3308      	adds	r3, #8
 8003cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1d9      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d017      	beq.n	8003d28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cfe:	4a15      	ldr	r2, [pc, #84]	@ (8003d54 <HAL_UART_IRQHandler+0x2c0>)
 8003d00:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd fd13 	bl	8001734 <HAL_DMA_Abort_IT>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d019      	beq.n	8003d48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003d22:	4610      	mov	r0, r2
 8003d24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d26:	e00f      	b.n	8003d48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f9ff 	bl	800412c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2e:	e00b      	b.n	8003d48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f9fb 	bl	800412c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d36:	e007      	b.n	8003d48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f9f7 	bl	800412c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003d46:	e1dc      	b.n	8004102 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	bf00      	nop
    return;
 8003d4a:	e1da      	b.n	8004102 <HAL_UART_IRQHandler+0x66e>
 8003d4c:	10000001 	.word	0x10000001
 8003d50:	04000120 	.word	0x04000120
 8003d54:	08004b2f 	.word	0x08004b2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	f040 8170 	bne.w	8004042 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8169 	beq.w	8004042 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8162 	beq.w	8004042 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2210      	movs	r2, #16
 8003d84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d90:	2b40      	cmp	r3, #64	@ 0x40
 8003d92:	f040 80d8 	bne.w	8003f46 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003da4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80af 	beq.w	8003f0c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003db4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003db8:	429a      	cmp	r2, r3
 8003dba:	f080 80a7 	bcs.w	8003f0c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 8087 	bne.w	8003eea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1da      	bne.n	8003ddc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e1      	bne.n	8003e26 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3308      	adds	r3, #8
 8003e82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e3      	bne.n	8003e62 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eb8:	f023 0310 	bic.w	r3, r3, #16
 8003ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003eca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ecc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ed0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e4      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fd fbcc 	bl	8001682 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f91b 	bl	8004140 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f0a:	e0fc      	b.n	8004106 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f16:	429a      	cmp	r2, r3
 8003f18:	f040 80f5 	bne.w	8004106 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	f040 80eb 	bne.w	8004106 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8fe 	bl	8004140 <HAL_UARTEx_RxEventCallback>
      return;
 8003f44:	e0df      	b.n	8004106 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80d1 	beq.w	800410a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80cc 	beq.w	800410a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e4      	bne.n	8003f72 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e1      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	60fb      	str	r3, [r7, #12]
   return(result);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f023 0310 	bic.w	r3, r3, #16
 800400c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	69b9      	ldr	r1, [r7, #24]
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	617b      	str	r3, [r7, #20]
   return(result);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e4      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004038:	4619      	mov	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f880 	bl	8004140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004040:	e063      	b.n	800410a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00e      	beq.n	800406c <HAL_UART_IRQHandler+0x5d8>
 800404e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fd9f 	bl	8004ba8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800406a:	e051      	b.n	8004110 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d014      	beq.n	80040a2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004088:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004094:	2b00      	cmp	r3, #0
 8004096:	d03a      	beq.n	800410e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
    }
    return;
 80040a0:	e035      	b.n	800410e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_UART_IRQHandler+0x62e>
 80040ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fd49 	bl	8004b52 <UART_EndTransmit_IT>
    return;
 80040c0:	e026      	b.n	8004110 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_UART_IRQHandler+0x64e>
 80040ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fd78 	bl	8004bd0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040e0:	e016      	b.n	8004110 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_UART_IRQHandler+0x67c>
 80040ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da0c      	bge.n	8004110 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fd60 	bl	8004bbc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040fc:	e008      	b.n	8004110 <HAL_UART_IRQHandler+0x67c>
      return;
 80040fe:	bf00      	nop
 8004100:	e006      	b.n	8004110 <HAL_UART_IRQHandler+0x67c>
    return;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <HAL_UART_IRQHandler+0x67c>
      return;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <HAL_UART_IRQHandler+0x67c>
      return;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_UART_IRQHandler+0x67c>
    return;
 800410e:	bf00      	nop
  }
}
 8004110:	37e8      	adds	r7, #232	@ 0xe8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop

08004118 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800415c:	b08c      	sub	sp, #48	@ 0x30
 800415e:	af00      	add	r7, sp, #0
 8004160:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	431a      	orrs	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	431a      	orrs	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4313      	orrs	r3, r2
 800417e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4bab      	ldr	r3, [pc, #684]	@ (8004434 <UART_SetConfig+0x2dc>)
 8004188:	4013      	ands	r3, r2
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004190:	430b      	orrs	r3, r1
 8004192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4aa0      	ldr	r2, [pc, #640]	@ (8004438 <UART_SetConfig+0x2e0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c0:	4313      	orrs	r3, r2
 80041c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80041ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041d8:	430b      	orrs	r3, r1
 80041da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	f023 010f 	bic.w	r1, r3, #15
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a91      	ldr	r2, [pc, #580]	@ (800443c <UART_SetConfig+0x2e4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d125      	bne.n	8004248 <UART_SetConfig+0xf0>
 80041fc:	4b90      	ldr	r3, [pc, #576]	@ (8004440 <UART_SetConfig+0x2e8>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b03      	cmp	r3, #3
 8004208:	d81a      	bhi.n	8004240 <UART_SetConfig+0xe8>
 800420a:	a201      	add	r2, pc, #4	@ (adr r2, 8004210 <UART_SetConfig+0xb8>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004221 	.word	0x08004221
 8004214:	08004231 	.word	0x08004231
 8004218:	08004229 	.word	0x08004229
 800421c:	08004239 	.word	0x08004239
 8004220:	2301      	movs	r3, #1
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004226:	e0d6      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004228:	2302      	movs	r3, #2
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422e:	e0d2      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004230:	2304      	movs	r3, #4
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004236:	e0ce      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004238:	2308      	movs	r3, #8
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423e:	e0ca      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004240:	2310      	movs	r3, #16
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004246:	e0c6      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a7d      	ldr	r2, [pc, #500]	@ (8004444 <UART_SetConfig+0x2ec>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d138      	bne.n	80042c4 <UART_SetConfig+0x16c>
 8004252:	4b7b      	ldr	r3, [pc, #492]	@ (8004440 <UART_SetConfig+0x2e8>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f003 030c 	and.w	r3, r3, #12
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d82d      	bhi.n	80042bc <UART_SetConfig+0x164>
 8004260:	a201      	add	r2, pc, #4	@ (adr r2, 8004268 <UART_SetConfig+0x110>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	0800429d 	.word	0x0800429d
 800426c:	080042bd 	.word	0x080042bd
 8004270:	080042bd 	.word	0x080042bd
 8004274:	080042bd 	.word	0x080042bd
 8004278:	080042ad 	.word	0x080042ad
 800427c:	080042bd 	.word	0x080042bd
 8004280:	080042bd 	.word	0x080042bd
 8004284:	080042bd 	.word	0x080042bd
 8004288:	080042a5 	.word	0x080042a5
 800428c:	080042bd 	.word	0x080042bd
 8004290:	080042bd 	.word	0x080042bd
 8004294:	080042bd 	.word	0x080042bd
 8004298:	080042b5 	.word	0x080042b5
 800429c:	2300      	movs	r3, #0
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042a2:	e098      	b.n	80043d6 <UART_SetConfig+0x27e>
 80042a4:	2302      	movs	r3, #2
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042aa:	e094      	b.n	80043d6 <UART_SetConfig+0x27e>
 80042ac:	2304      	movs	r3, #4
 80042ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042b2:	e090      	b.n	80043d6 <UART_SetConfig+0x27e>
 80042b4:	2308      	movs	r3, #8
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ba:	e08c      	b.n	80043d6 <UART_SetConfig+0x27e>
 80042bc:	2310      	movs	r3, #16
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042c2:	e088      	b.n	80043d6 <UART_SetConfig+0x27e>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a5f      	ldr	r2, [pc, #380]	@ (8004448 <UART_SetConfig+0x2f0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d125      	bne.n	800431a <UART_SetConfig+0x1c2>
 80042ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004440 <UART_SetConfig+0x2e8>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042d8:	2b30      	cmp	r3, #48	@ 0x30
 80042da:	d016      	beq.n	800430a <UART_SetConfig+0x1b2>
 80042dc:	2b30      	cmp	r3, #48	@ 0x30
 80042de:	d818      	bhi.n	8004312 <UART_SetConfig+0x1ba>
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d00a      	beq.n	80042fa <UART_SetConfig+0x1a2>
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d814      	bhi.n	8004312 <UART_SetConfig+0x1ba>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <UART_SetConfig+0x19a>
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d008      	beq.n	8004302 <UART_SetConfig+0x1aa>
 80042f0:	e00f      	b.n	8004312 <UART_SetConfig+0x1ba>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f8:	e06d      	b.n	80043d6 <UART_SetConfig+0x27e>
 80042fa:	2302      	movs	r3, #2
 80042fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004300:	e069      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004302:	2304      	movs	r3, #4
 8004304:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004308:	e065      	b.n	80043d6 <UART_SetConfig+0x27e>
 800430a:	2308      	movs	r3, #8
 800430c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004310:	e061      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004312:	2310      	movs	r3, #16
 8004314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004318:	e05d      	b.n	80043d6 <UART_SetConfig+0x27e>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a4b      	ldr	r2, [pc, #300]	@ (800444c <UART_SetConfig+0x2f4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d125      	bne.n	8004370 <UART_SetConfig+0x218>
 8004324:	4b46      	ldr	r3, [pc, #280]	@ (8004440 <UART_SetConfig+0x2e8>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800432e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004330:	d016      	beq.n	8004360 <UART_SetConfig+0x208>
 8004332:	2bc0      	cmp	r3, #192	@ 0xc0
 8004334:	d818      	bhi.n	8004368 <UART_SetConfig+0x210>
 8004336:	2b80      	cmp	r3, #128	@ 0x80
 8004338:	d00a      	beq.n	8004350 <UART_SetConfig+0x1f8>
 800433a:	2b80      	cmp	r3, #128	@ 0x80
 800433c:	d814      	bhi.n	8004368 <UART_SetConfig+0x210>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <UART_SetConfig+0x1f0>
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	d008      	beq.n	8004358 <UART_SetConfig+0x200>
 8004346:	e00f      	b.n	8004368 <UART_SetConfig+0x210>
 8004348:	2300      	movs	r3, #0
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800434e:	e042      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004350:	2302      	movs	r3, #2
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004356:	e03e      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004358:	2304      	movs	r3, #4
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435e:	e03a      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004360:	2308      	movs	r3, #8
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004366:	e036      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436e:	e032      	b.n	80043d6 <UART_SetConfig+0x27e>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a30      	ldr	r2, [pc, #192]	@ (8004438 <UART_SetConfig+0x2e0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d12a      	bne.n	80043d0 <UART_SetConfig+0x278>
 800437a:	4b31      	ldr	r3, [pc, #196]	@ (8004440 <UART_SetConfig+0x2e8>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004380:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004384:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004388:	d01a      	beq.n	80043c0 <UART_SetConfig+0x268>
 800438a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800438e:	d81b      	bhi.n	80043c8 <UART_SetConfig+0x270>
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004394:	d00c      	beq.n	80043b0 <UART_SetConfig+0x258>
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800439a:	d815      	bhi.n	80043c8 <UART_SetConfig+0x270>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <UART_SetConfig+0x250>
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a4:	d008      	beq.n	80043b8 <UART_SetConfig+0x260>
 80043a6:	e00f      	b.n	80043c8 <UART_SetConfig+0x270>
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ae:	e012      	b.n	80043d6 <UART_SetConfig+0x27e>
 80043b0:	2302      	movs	r3, #2
 80043b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b6:	e00e      	b.n	80043d6 <UART_SetConfig+0x27e>
 80043b8:	2304      	movs	r3, #4
 80043ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043be:	e00a      	b.n	80043d6 <UART_SetConfig+0x27e>
 80043c0:	2308      	movs	r3, #8
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c6:	e006      	b.n	80043d6 <UART_SetConfig+0x27e>
 80043c8:	2310      	movs	r3, #16
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ce:	e002      	b.n	80043d6 <UART_SetConfig+0x27e>
 80043d0:	2310      	movs	r3, #16
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a17      	ldr	r2, [pc, #92]	@ (8004438 <UART_SetConfig+0x2e0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	f040 80a8 	bne.w	8004532 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d834      	bhi.n	8004454 <UART_SetConfig+0x2fc>
 80043ea:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <UART_SetConfig+0x298>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004455 	.word	0x08004455
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004455 	.word	0x08004455
 8004400:	08004423 	.word	0x08004423
 8004404:	08004455 	.word	0x08004455
 8004408:	08004455 	.word	0x08004455
 800440c:	08004455 	.word	0x08004455
 8004410:	0800442b 	.word	0x0800442b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004414:	f7fe fffe 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8004418:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800441a:	e021      	b.n	8004460 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <UART_SetConfig+0x2f8>)
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004420:	e01e      	b.n	8004460 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004422:	f7fe ff89 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 8004426:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004428:	e01a      	b.n	8004460 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004430:	e016      	b.n	8004460 <UART_SetConfig+0x308>
 8004432:	bf00      	nop
 8004434:	cfff69f3 	.word	0xcfff69f3
 8004438:	40008000 	.word	0x40008000
 800443c:	40013800 	.word	0x40013800
 8004440:	40021000 	.word	0x40021000
 8004444:	40004400 	.word	0x40004400
 8004448:	40004800 	.word	0x40004800
 800444c:	40004c00 	.word	0x40004c00
 8004450:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800445e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 812a 	beq.w	80046bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	4a9e      	ldr	r2, [pc, #632]	@ (80046e8 <UART_SetConfig+0x590>)
 800446e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004472:	461a      	mov	r2, r3
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	fbb3 f3f2 	udiv	r3, r3, r2
 800447a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4413      	add	r3, r2
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d305      	bcc.n	8004498 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	429a      	cmp	r2, r3
 8004496:	d903      	bls.n	80044a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800449e:	e10d      	b.n	80046bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	2200      	movs	r2, #0
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	60fa      	str	r2, [r7, #12]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	4a8e      	ldr	r2, [pc, #568]	@ (80046e8 <UART_SetConfig+0x590>)
 80044ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2200      	movs	r2, #0
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044c2:	f7fb fefd 	bl	80002c0 <__aeabi_uldivmod>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	020b      	lsls	r3, r1, #8
 80044d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044dc:	0202      	lsls	r2, r0, #8
 80044de:	6979      	ldr	r1, [r7, #20]
 80044e0:	6849      	ldr	r1, [r1, #4]
 80044e2:	0849      	lsrs	r1, r1, #1
 80044e4:	2000      	movs	r0, #0
 80044e6:	460c      	mov	r4, r1
 80044e8:	4605      	mov	r5, r0
 80044ea:	eb12 0804 	adds.w	r8, r2, r4
 80044ee:	eb43 0905 	adc.w	r9, r3, r5
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	469a      	mov	sl, r3
 80044fa:	4693      	mov	fp, r2
 80044fc:	4652      	mov	r2, sl
 80044fe:	465b      	mov	r3, fp
 8004500:	4640      	mov	r0, r8
 8004502:	4649      	mov	r1, r9
 8004504:	f7fb fedc 	bl	80002c0 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004516:	d308      	bcc.n	800452a <UART_SetConfig+0x3d2>
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800451e:	d204      	bcs.n	800452a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	e0c8      	b.n	80046bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004530:	e0c4      	b.n	80046bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d167      	bne.n	800460c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800453c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004540:	2b08      	cmp	r3, #8
 8004542:	d828      	bhi.n	8004596 <UART_SetConfig+0x43e>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <UART_SetConfig+0x3f4>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fe ff50 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8004574:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004576:	e014      	b.n	80045a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fe ff62 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 800457c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800457e:	e010      	b.n	80045a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b5a      	ldr	r3, [pc, #360]	@ (80046ec <UART_SetConfig+0x594>)
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004584:	e00d      	b.n	80045a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fe fed7 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 800458a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800458c:	e009      	b.n	80045a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004594:	e005      	b.n	80045a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8089 	beq.w	80046bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	4a4e      	ldr	r2, [pc, #312]	@ (80046e8 <UART_SetConfig+0x590>)
 80045b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045b4:	461a      	mov	r2, r3
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80045bc:	005a      	lsls	r2, r3, #1
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	441a      	add	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	d916      	bls.n	8004604 <UART_SetConfig+0x4ac>
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045dc:	d212      	bcs.n	8004604 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f023 030f 	bic.w	r3, r3, #15
 80045e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	8bfb      	ldrh	r3, [r7, #30]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	8bfa      	ldrh	r2, [r7, #30]
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	e05b      	b.n	80046bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800460a:	e057      	b.n	80046bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800460c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004610:	2b08      	cmp	r3, #8
 8004612:	d828      	bhi.n	8004666 <UART_SetConfig+0x50e>
 8004614:	a201      	add	r2, pc, #4	@ (adr r2, 800461c <UART_SetConfig+0x4c4>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004641 	.word	0x08004641
 8004620:	08004649 	.word	0x08004649
 8004624:	08004651 	.word	0x08004651
 8004628:	08004667 	.word	0x08004667
 800462c:	08004657 	.word	0x08004657
 8004630:	08004667 	.word	0x08004667
 8004634:	08004667 	.word	0x08004667
 8004638:	08004667 	.word	0x08004667
 800463c:	0800465f 	.word	0x0800465f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7fe fee8 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8004644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004646:	e014      	b.n	8004672 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7fe fefa 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 800464c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800464e:	e010      	b.n	8004672 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004650:	4b26      	ldr	r3, [pc, #152]	@ (80046ec <UART_SetConfig+0x594>)
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004654:	e00d      	b.n	8004672 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe fe6f 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 800465a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800465c:	e009      	b.n	8004672 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004664:	e005      	b.n	8004672 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004670:	bf00      	nop
    }

    if (pclk != 0U)
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	d021      	beq.n	80046bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	4a1a      	ldr	r2, [pc, #104]	@ (80046e8 <UART_SetConfig+0x590>)
 800467e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004682:	461a      	mov	r2, r3
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	fbb3 f2f2 	udiv	r2, r3, r2
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	441a      	add	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	d909      	bls.n	80046b6 <UART_SetConfig+0x55e>
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a8:	d205      	bcs.n	80046b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60da      	str	r2, [r3, #12]
 80046b4:	e002      	b.n	80046bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2201      	movs	r2, #1
 80046c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2200      	movs	r2, #0
 80046d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2200      	movs	r2, #0
 80046d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80046d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3730      	adds	r7, #48	@ 0x30
 80046e0:	46bd      	mov	sp, r7
 80046e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e6:	bf00      	nop
 80046e8:	0800607c 	.word	0x0800607c
 80046ec:	00f42400 	.word	0x00f42400

080046f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01a      	beq.n	8004806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ee:	d10a      	bne.n	8004806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b098      	sub	sp, #96	@ 0x60
 8004838:	af02      	add	r7, sp, #8
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004844:	f7fc fde0 	bl	8001408 <HAL_GetTick>
 8004848:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b08      	cmp	r3, #8
 8004856:	d12f      	bne.n	80048b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004858:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f88e 	bl	8004988 <UART_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d022      	beq.n	80048b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004886:	653b      	str	r3, [r7, #80]	@ 0x50
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004890:	647b      	str	r3, [r7, #68]	@ 0x44
 8004892:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800489e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e6      	bne.n	8004872 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e063      	b.n	8004980 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d149      	bne.n	800495a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ce:	2200      	movs	r2, #0
 80048d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f857 	bl	8004988 <UART_WaitOnFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d03c      	beq.n	800495a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	623b      	str	r3, [r7, #32]
   return(result);
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004900:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	60fb      	str	r3, [r7, #12]
   return(result);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004932:	61fa      	str	r2, [r7, #28]
 8004934:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	69b9      	ldr	r1, [r7, #24]
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	617b      	str	r3, [r7, #20]
   return(result);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e012      	b.n	8004980 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3758      	adds	r7, #88	@ 0x58
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	4613      	mov	r3, r2
 8004996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004998:	e04f      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d04b      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a2:	f7fc fd31 	bl	8001408 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e04e      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d037      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xb2>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b80      	cmp	r3, #128	@ 0x80
 80049ce:	d034      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xb2>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b40      	cmp	r3, #64	@ 0x40
 80049d4:	d031      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d110      	bne.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2208      	movs	r2, #8
 80049ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f838 	bl	8004a62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2208      	movs	r2, #8
 80049f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e029      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a14:	d111      	bne.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f81e 	bl	8004a62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e00f      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	bf0c      	ite	eq
 8004a4a:	2301      	moveq	r3, #1
 8004a4c:	2300      	movne	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d0a0      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b095      	sub	sp, #84	@ 0x54
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a88:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e6      	bne.n	8004a6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ac0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e3      	bne.n	8004a9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d118      	bne.n	8004b0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f023 0310 	bic.w	r3, r3, #16
 8004af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	613b      	str	r3, [r7, #16]
   return(result);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e6      	bne.n	8004adc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b22:	bf00      	nop
 8004b24:	3754      	adds	r7, #84	@ 0x54
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff faf1 	bl	800412c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b088      	sub	sp, #32
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6979      	ldr	r1, [r7, #20]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	613b      	str	r3, [r7, #16]
   return(result);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e6      	bne.n	8004b5a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fabc 	bl	8004118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ba0:	bf00      	nop
 8004ba2:	3720      	adds	r7, #32
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_UARTEx_DisableFifoMode+0x16>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e027      	b.n	8004c4a <HAL_UARTEx_DisableFifoMode+0x66>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2224      	movs	r2, #36	@ 0x24
 8004c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004c28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e02d      	b.n	8004cca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2224      	movs	r2, #36	@ 0x24
 8004c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f850 	bl	8004d50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e02d      	b.n	8004d46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2224      	movs	r2, #36	@ 0x24
 8004cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f812 	bl	8004d50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d108      	bne.n	8004d72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d70:	e031      	b.n	8004dd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d72:	2308      	movs	r3, #8
 8004d74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d76:	2308      	movs	r3, #8
 8004d78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	0e5b      	lsrs	r3, r3, #25
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	0f5b      	lsrs	r3, r3, #29
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	7b3a      	ldrb	r2, [r7, #12]
 8004d9e:	4911      	ldr	r1, [pc, #68]	@ (8004de4 <UARTEx_SetNbDataToProcess+0x94>)
 8004da0:	5c8a      	ldrb	r2, [r1, r2]
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004da6:	7b3a      	ldrb	r2, [r7, #12]
 8004da8:	490f      	ldr	r1, [pc, #60]	@ (8004de8 <UARTEx_SetNbDataToProcess+0x98>)
 8004daa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dac:	fb93 f3f2 	sdiv	r3, r3, r2
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	7b7a      	ldrb	r2, [r7, #13]
 8004dbc:	4909      	ldr	r1, [pc, #36]	@ (8004de4 <UARTEx_SetNbDataToProcess+0x94>)
 8004dbe:	5c8a      	ldrb	r2, [r1, r2]
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004dc4:	7b7a      	ldrb	r2, [r7, #13]
 8004dc6:	4908      	ldr	r1, [pc, #32]	@ (8004de8 <UARTEx_SetNbDataToProcess+0x98>)
 8004dc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004dca:	fb93 f3f2 	sdiv	r3, r3, r2
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	08006094 	.word	0x08006094
 8004de8:	0800609c 	.word	0x0800609c

08004dec <std>:
 8004dec:	2300      	movs	r3, #0
 8004dee:	b510      	push	{r4, lr}
 8004df0:	4604      	mov	r4, r0
 8004df2:	e9c0 3300 	strd	r3, r3, [r0]
 8004df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dfa:	6083      	str	r3, [r0, #8]
 8004dfc:	8181      	strh	r1, [r0, #12]
 8004dfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e00:	81c2      	strh	r2, [r0, #14]
 8004e02:	6183      	str	r3, [r0, #24]
 8004e04:	4619      	mov	r1, r3
 8004e06:	2208      	movs	r2, #8
 8004e08:	305c      	adds	r0, #92	@ 0x5c
 8004e0a:	f000 f9f9 	bl	8005200 <memset>
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <std+0x58>)
 8004e10:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e12:	4b0d      	ldr	r3, [pc, #52]	@ (8004e48 <std+0x5c>)
 8004e14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e16:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <std+0x60>)
 8004e18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <std+0x64>)
 8004e1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <std+0x68>)
 8004e20:	6224      	str	r4, [r4, #32]
 8004e22:	429c      	cmp	r4, r3
 8004e24:	d006      	beq.n	8004e34 <std+0x48>
 8004e26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e2a:	4294      	cmp	r4, r2
 8004e2c:	d002      	beq.n	8004e34 <std+0x48>
 8004e2e:	33d0      	adds	r3, #208	@ 0xd0
 8004e30:	429c      	cmp	r4, r3
 8004e32:	d105      	bne.n	8004e40 <std+0x54>
 8004e34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e3c:	f000 ba58 	b.w	80052f0 <__retarget_lock_init_recursive>
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	bf00      	nop
 8004e44:	08005051 	.word	0x08005051
 8004e48:	08005073 	.word	0x08005073
 8004e4c:	080050ab 	.word	0x080050ab
 8004e50:	080050cf 	.word	0x080050cf
 8004e54:	200002b8 	.word	0x200002b8

08004e58 <stdio_exit_handler>:
 8004e58:	4a02      	ldr	r2, [pc, #8]	@ (8004e64 <stdio_exit_handler+0xc>)
 8004e5a:	4903      	ldr	r1, [pc, #12]	@ (8004e68 <stdio_exit_handler+0x10>)
 8004e5c:	4803      	ldr	r0, [pc, #12]	@ (8004e6c <stdio_exit_handler+0x14>)
 8004e5e:	f000 b869 	b.w	8004f34 <_fwalk_sglue>
 8004e62:	bf00      	nop
 8004e64:	20000010 	.word	0x20000010
 8004e68:	08005b8d 	.word	0x08005b8d
 8004e6c:	20000020 	.word	0x20000020

08004e70 <cleanup_stdio>:
 8004e70:	6841      	ldr	r1, [r0, #4]
 8004e72:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <cleanup_stdio+0x34>)
 8004e74:	4299      	cmp	r1, r3
 8004e76:	b510      	push	{r4, lr}
 8004e78:	4604      	mov	r4, r0
 8004e7a:	d001      	beq.n	8004e80 <cleanup_stdio+0x10>
 8004e7c:	f000 fe86 	bl	8005b8c <_fflush_r>
 8004e80:	68a1      	ldr	r1, [r4, #8]
 8004e82:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <cleanup_stdio+0x38>)
 8004e84:	4299      	cmp	r1, r3
 8004e86:	d002      	beq.n	8004e8e <cleanup_stdio+0x1e>
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f000 fe7f 	bl	8005b8c <_fflush_r>
 8004e8e:	68e1      	ldr	r1, [r4, #12]
 8004e90:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <cleanup_stdio+0x3c>)
 8004e92:	4299      	cmp	r1, r3
 8004e94:	d004      	beq.n	8004ea0 <cleanup_stdio+0x30>
 8004e96:	4620      	mov	r0, r4
 8004e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e9c:	f000 be76 	b.w	8005b8c <_fflush_r>
 8004ea0:	bd10      	pop	{r4, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200002b8 	.word	0x200002b8
 8004ea8:	20000320 	.word	0x20000320
 8004eac:	20000388 	.word	0x20000388

08004eb0 <global_stdio_init.part.0>:
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <global_stdio_init.part.0+0x30>)
 8004eb4:	4c0b      	ldr	r4, [pc, #44]	@ (8004ee4 <global_stdio_init.part.0+0x34>)
 8004eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee8 <global_stdio_init.part.0+0x38>)
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	4620      	mov	r0, r4
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	f7ff ff94 	bl	8004dec <std>
 8004ec4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ec8:	2201      	movs	r2, #1
 8004eca:	2109      	movs	r1, #9
 8004ecc:	f7ff ff8e 	bl	8004dec <std>
 8004ed0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eda:	2112      	movs	r1, #18
 8004edc:	f7ff bf86 	b.w	8004dec <std>
 8004ee0:	200003f0 	.word	0x200003f0
 8004ee4:	200002b8 	.word	0x200002b8
 8004ee8:	08004e59 	.word	0x08004e59

08004eec <__sfp_lock_acquire>:
 8004eec:	4801      	ldr	r0, [pc, #4]	@ (8004ef4 <__sfp_lock_acquire+0x8>)
 8004eee:	f000 ba00 	b.w	80052f2 <__retarget_lock_acquire_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	200003f9 	.word	0x200003f9

08004ef8 <__sfp_lock_release>:
 8004ef8:	4801      	ldr	r0, [pc, #4]	@ (8004f00 <__sfp_lock_release+0x8>)
 8004efa:	f000 b9fb 	b.w	80052f4 <__retarget_lock_release_recursive>
 8004efe:	bf00      	nop
 8004f00:	200003f9 	.word	0x200003f9

08004f04 <__sinit>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	4604      	mov	r4, r0
 8004f08:	f7ff fff0 	bl	8004eec <__sfp_lock_acquire>
 8004f0c:	6a23      	ldr	r3, [r4, #32]
 8004f0e:	b11b      	cbz	r3, 8004f18 <__sinit+0x14>
 8004f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f14:	f7ff bff0 	b.w	8004ef8 <__sfp_lock_release>
 8004f18:	4b04      	ldr	r3, [pc, #16]	@ (8004f2c <__sinit+0x28>)
 8004f1a:	6223      	str	r3, [r4, #32]
 8004f1c:	4b04      	ldr	r3, [pc, #16]	@ (8004f30 <__sinit+0x2c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f5      	bne.n	8004f10 <__sinit+0xc>
 8004f24:	f7ff ffc4 	bl	8004eb0 <global_stdio_init.part.0>
 8004f28:	e7f2      	b.n	8004f10 <__sinit+0xc>
 8004f2a:	bf00      	nop
 8004f2c:	08004e71 	.word	0x08004e71
 8004f30:	200003f0 	.word	0x200003f0

08004f34 <_fwalk_sglue>:
 8004f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f38:	4607      	mov	r7, r0
 8004f3a:	4688      	mov	r8, r1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	2600      	movs	r6, #0
 8004f40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f44:	f1b9 0901 	subs.w	r9, r9, #1
 8004f48:	d505      	bpl.n	8004f56 <_fwalk_sglue+0x22>
 8004f4a:	6824      	ldr	r4, [r4, #0]
 8004f4c:	2c00      	cmp	r4, #0
 8004f4e:	d1f7      	bne.n	8004f40 <_fwalk_sglue+0xc>
 8004f50:	4630      	mov	r0, r6
 8004f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f56:	89ab      	ldrh	r3, [r5, #12]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d907      	bls.n	8004f6c <_fwalk_sglue+0x38>
 8004f5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f60:	3301      	adds	r3, #1
 8004f62:	d003      	beq.n	8004f6c <_fwalk_sglue+0x38>
 8004f64:	4629      	mov	r1, r5
 8004f66:	4638      	mov	r0, r7
 8004f68:	47c0      	blx	r8
 8004f6a:	4306      	orrs	r6, r0
 8004f6c:	3568      	adds	r5, #104	@ 0x68
 8004f6e:	e7e9      	b.n	8004f44 <_fwalk_sglue+0x10>

08004f70 <iprintf>:
 8004f70:	b40f      	push	{r0, r1, r2, r3}
 8004f72:	b507      	push	{r0, r1, r2, lr}
 8004f74:	4906      	ldr	r1, [pc, #24]	@ (8004f90 <iprintf+0x20>)
 8004f76:	ab04      	add	r3, sp, #16
 8004f78:	6808      	ldr	r0, [r1, #0]
 8004f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f7e:	6881      	ldr	r1, [r0, #8]
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	f000 fadb 	bl	800553c <_vfiprintf_r>
 8004f86:	b003      	add	sp, #12
 8004f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f8c:	b004      	add	sp, #16
 8004f8e:	4770      	bx	lr
 8004f90:	2000001c 	.word	0x2000001c

08004f94 <_puts_r>:
 8004f94:	6a03      	ldr	r3, [r0, #32]
 8004f96:	b570      	push	{r4, r5, r6, lr}
 8004f98:	6884      	ldr	r4, [r0, #8]
 8004f9a:	4605      	mov	r5, r0
 8004f9c:	460e      	mov	r6, r1
 8004f9e:	b90b      	cbnz	r3, 8004fa4 <_puts_r+0x10>
 8004fa0:	f7ff ffb0 	bl	8004f04 <__sinit>
 8004fa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fa6:	07db      	lsls	r3, r3, #31
 8004fa8:	d405      	bmi.n	8004fb6 <_puts_r+0x22>
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	0598      	lsls	r0, r3, #22
 8004fae:	d402      	bmi.n	8004fb6 <_puts_r+0x22>
 8004fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fb2:	f000 f99e 	bl	80052f2 <__retarget_lock_acquire_recursive>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	0719      	lsls	r1, r3, #28
 8004fba:	d502      	bpl.n	8004fc2 <_puts_r+0x2e>
 8004fbc:	6923      	ldr	r3, [r4, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d135      	bne.n	800502e <_puts_r+0x9a>
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f000 f8c5 	bl	8005154 <__swsetup_r>
 8004fca:	b380      	cbz	r0, 800502e <_puts_r+0x9a>
 8004fcc:	f04f 35ff 	mov.w	r5, #4294967295
 8004fd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fd2:	07da      	lsls	r2, r3, #31
 8004fd4:	d405      	bmi.n	8004fe2 <_puts_r+0x4e>
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	059b      	lsls	r3, r3, #22
 8004fda:	d402      	bmi.n	8004fe2 <_puts_r+0x4e>
 8004fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fde:	f000 f989 	bl	80052f4 <__retarget_lock_release_recursive>
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	bd70      	pop	{r4, r5, r6, pc}
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da04      	bge.n	8004ff4 <_puts_r+0x60>
 8004fea:	69a2      	ldr	r2, [r4, #24]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	dc17      	bgt.n	8005020 <_puts_r+0x8c>
 8004ff0:	290a      	cmp	r1, #10
 8004ff2:	d015      	beq.n	8005020 <_puts_r+0x8c>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	6022      	str	r2, [r4, #0]
 8004ffa:	7019      	strb	r1, [r3, #0]
 8004ffc:	68a3      	ldr	r3, [r4, #8]
 8004ffe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005002:	3b01      	subs	r3, #1
 8005004:	60a3      	str	r3, [r4, #8]
 8005006:	2900      	cmp	r1, #0
 8005008:	d1ed      	bne.n	8004fe6 <_puts_r+0x52>
 800500a:	2b00      	cmp	r3, #0
 800500c:	da11      	bge.n	8005032 <_puts_r+0x9e>
 800500e:	4622      	mov	r2, r4
 8005010:	210a      	movs	r1, #10
 8005012:	4628      	mov	r0, r5
 8005014:	f000 f85f 	bl	80050d6 <__swbuf_r>
 8005018:	3001      	adds	r0, #1
 800501a:	d0d7      	beq.n	8004fcc <_puts_r+0x38>
 800501c:	250a      	movs	r5, #10
 800501e:	e7d7      	b.n	8004fd0 <_puts_r+0x3c>
 8005020:	4622      	mov	r2, r4
 8005022:	4628      	mov	r0, r5
 8005024:	f000 f857 	bl	80050d6 <__swbuf_r>
 8005028:	3001      	adds	r0, #1
 800502a:	d1e7      	bne.n	8004ffc <_puts_r+0x68>
 800502c:	e7ce      	b.n	8004fcc <_puts_r+0x38>
 800502e:	3e01      	subs	r6, #1
 8005030:	e7e4      	b.n	8004ffc <_puts_r+0x68>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	220a      	movs	r2, #10
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	e7ee      	b.n	800501c <_puts_r+0x88>
	...

08005040 <puts>:
 8005040:	4b02      	ldr	r3, [pc, #8]	@ (800504c <puts+0xc>)
 8005042:	4601      	mov	r1, r0
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	f7ff bfa5 	b.w	8004f94 <_puts_r>
 800504a:	bf00      	nop
 800504c:	2000001c 	.word	0x2000001c

08005050 <__sread>:
 8005050:	b510      	push	{r4, lr}
 8005052:	460c      	mov	r4, r1
 8005054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005058:	f000 f8fc 	bl	8005254 <_read_r>
 800505c:	2800      	cmp	r0, #0
 800505e:	bfab      	itete	ge
 8005060:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005062:	89a3      	ldrhlt	r3, [r4, #12]
 8005064:	181b      	addge	r3, r3, r0
 8005066:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800506a:	bfac      	ite	ge
 800506c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800506e:	81a3      	strhlt	r3, [r4, #12]
 8005070:	bd10      	pop	{r4, pc}

08005072 <__swrite>:
 8005072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005076:	461f      	mov	r7, r3
 8005078:	898b      	ldrh	r3, [r1, #12]
 800507a:	05db      	lsls	r3, r3, #23
 800507c:	4605      	mov	r5, r0
 800507e:	460c      	mov	r4, r1
 8005080:	4616      	mov	r6, r2
 8005082:	d505      	bpl.n	8005090 <__swrite+0x1e>
 8005084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005088:	2302      	movs	r3, #2
 800508a:	2200      	movs	r2, #0
 800508c:	f000 f8d0 	bl	8005230 <_lseek_r>
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800509a:	81a3      	strh	r3, [r4, #12]
 800509c:	4632      	mov	r2, r6
 800509e:	463b      	mov	r3, r7
 80050a0:	4628      	mov	r0, r5
 80050a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050a6:	f000 b8e7 	b.w	8005278 <_write_r>

080050aa <__sseek>:
 80050aa:	b510      	push	{r4, lr}
 80050ac:	460c      	mov	r4, r1
 80050ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b2:	f000 f8bd 	bl	8005230 <_lseek_r>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	bf15      	itete	ne
 80050bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050c6:	81a3      	strheq	r3, [r4, #12]
 80050c8:	bf18      	it	ne
 80050ca:	81a3      	strhne	r3, [r4, #12]
 80050cc:	bd10      	pop	{r4, pc}

080050ce <__sclose>:
 80050ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d2:	f000 b89d 	b.w	8005210 <_close_r>

080050d6 <__swbuf_r>:
 80050d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d8:	460e      	mov	r6, r1
 80050da:	4614      	mov	r4, r2
 80050dc:	4605      	mov	r5, r0
 80050de:	b118      	cbz	r0, 80050e8 <__swbuf_r+0x12>
 80050e0:	6a03      	ldr	r3, [r0, #32]
 80050e2:	b90b      	cbnz	r3, 80050e8 <__swbuf_r+0x12>
 80050e4:	f7ff ff0e 	bl	8004f04 <__sinit>
 80050e8:	69a3      	ldr	r3, [r4, #24]
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	071a      	lsls	r2, r3, #28
 80050f0:	d501      	bpl.n	80050f6 <__swbuf_r+0x20>
 80050f2:	6923      	ldr	r3, [r4, #16]
 80050f4:	b943      	cbnz	r3, 8005108 <__swbuf_r+0x32>
 80050f6:	4621      	mov	r1, r4
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 f82b 	bl	8005154 <__swsetup_r>
 80050fe:	b118      	cbz	r0, 8005108 <__swbuf_r+0x32>
 8005100:	f04f 37ff 	mov.w	r7, #4294967295
 8005104:	4638      	mov	r0, r7
 8005106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	6922      	ldr	r2, [r4, #16]
 800510c:	1a98      	subs	r0, r3, r2
 800510e:	6963      	ldr	r3, [r4, #20]
 8005110:	b2f6      	uxtb	r6, r6
 8005112:	4283      	cmp	r3, r0
 8005114:	4637      	mov	r7, r6
 8005116:	dc05      	bgt.n	8005124 <__swbuf_r+0x4e>
 8005118:	4621      	mov	r1, r4
 800511a:	4628      	mov	r0, r5
 800511c:	f000 fd36 	bl	8005b8c <_fflush_r>
 8005120:	2800      	cmp	r0, #0
 8005122:	d1ed      	bne.n	8005100 <__swbuf_r+0x2a>
 8005124:	68a3      	ldr	r3, [r4, #8]
 8005126:	3b01      	subs	r3, #1
 8005128:	60a3      	str	r3, [r4, #8]
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	6022      	str	r2, [r4, #0]
 8005130:	701e      	strb	r6, [r3, #0]
 8005132:	6962      	ldr	r2, [r4, #20]
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	429a      	cmp	r2, r3
 8005138:	d004      	beq.n	8005144 <__swbuf_r+0x6e>
 800513a:	89a3      	ldrh	r3, [r4, #12]
 800513c:	07db      	lsls	r3, r3, #31
 800513e:	d5e1      	bpl.n	8005104 <__swbuf_r+0x2e>
 8005140:	2e0a      	cmp	r6, #10
 8005142:	d1df      	bne.n	8005104 <__swbuf_r+0x2e>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 fd20 	bl	8005b8c <_fflush_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	d0d9      	beq.n	8005104 <__swbuf_r+0x2e>
 8005150:	e7d6      	b.n	8005100 <__swbuf_r+0x2a>
	...

08005154 <__swsetup_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4b29      	ldr	r3, [pc, #164]	@ (80051fc <__swsetup_r+0xa8>)
 8005158:	4605      	mov	r5, r0
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	460c      	mov	r4, r1
 800515e:	b118      	cbz	r0, 8005168 <__swsetup_r+0x14>
 8005160:	6a03      	ldr	r3, [r0, #32]
 8005162:	b90b      	cbnz	r3, 8005168 <__swsetup_r+0x14>
 8005164:	f7ff fece 	bl	8004f04 <__sinit>
 8005168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800516c:	0719      	lsls	r1, r3, #28
 800516e:	d422      	bmi.n	80051b6 <__swsetup_r+0x62>
 8005170:	06da      	lsls	r2, r3, #27
 8005172:	d407      	bmi.n	8005184 <__swsetup_r+0x30>
 8005174:	2209      	movs	r2, #9
 8005176:	602a      	str	r2, [r5, #0]
 8005178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	f04f 30ff 	mov.w	r0, #4294967295
 8005182:	e033      	b.n	80051ec <__swsetup_r+0x98>
 8005184:	0758      	lsls	r0, r3, #29
 8005186:	d512      	bpl.n	80051ae <__swsetup_r+0x5a>
 8005188:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800518a:	b141      	cbz	r1, 800519e <__swsetup_r+0x4a>
 800518c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005190:	4299      	cmp	r1, r3
 8005192:	d002      	beq.n	800519a <__swsetup_r+0x46>
 8005194:	4628      	mov	r0, r5
 8005196:	f000 f8af 	bl	80052f8 <_free_r>
 800519a:	2300      	movs	r3, #0
 800519c:	6363      	str	r3, [r4, #52]	@ 0x34
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	2300      	movs	r3, #0
 80051a8:	6063      	str	r3, [r4, #4]
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	f043 0308 	orr.w	r3, r3, #8
 80051b4:	81a3      	strh	r3, [r4, #12]
 80051b6:	6923      	ldr	r3, [r4, #16]
 80051b8:	b94b      	cbnz	r3, 80051ce <__swsetup_r+0x7a>
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c4:	d003      	beq.n	80051ce <__swsetup_r+0x7a>
 80051c6:	4621      	mov	r1, r4
 80051c8:	4628      	mov	r0, r5
 80051ca:	f000 fd2d 	bl	8005c28 <__smakebuf_r>
 80051ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d2:	f013 0201 	ands.w	r2, r3, #1
 80051d6:	d00a      	beq.n	80051ee <__swsetup_r+0x9a>
 80051d8:	2200      	movs	r2, #0
 80051da:	60a2      	str	r2, [r4, #8]
 80051dc:	6962      	ldr	r2, [r4, #20]
 80051de:	4252      	negs	r2, r2
 80051e0:	61a2      	str	r2, [r4, #24]
 80051e2:	6922      	ldr	r2, [r4, #16]
 80051e4:	b942      	cbnz	r2, 80051f8 <__swsetup_r+0xa4>
 80051e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051ea:	d1c5      	bne.n	8005178 <__swsetup_r+0x24>
 80051ec:	bd38      	pop	{r3, r4, r5, pc}
 80051ee:	0799      	lsls	r1, r3, #30
 80051f0:	bf58      	it	pl
 80051f2:	6962      	ldrpl	r2, [r4, #20]
 80051f4:	60a2      	str	r2, [r4, #8]
 80051f6:	e7f4      	b.n	80051e2 <__swsetup_r+0x8e>
 80051f8:	2000      	movs	r0, #0
 80051fa:	e7f7      	b.n	80051ec <__swsetup_r+0x98>
 80051fc:	2000001c 	.word	0x2000001c

08005200 <memset>:
 8005200:	4402      	add	r2, r0
 8005202:	4603      	mov	r3, r0
 8005204:	4293      	cmp	r3, r2
 8005206:	d100      	bne.n	800520a <memset+0xa>
 8005208:	4770      	bx	lr
 800520a:	f803 1b01 	strb.w	r1, [r3], #1
 800520e:	e7f9      	b.n	8005204 <memset+0x4>

08005210 <_close_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4d06      	ldr	r5, [pc, #24]	@ (800522c <_close_r+0x1c>)
 8005214:	2300      	movs	r3, #0
 8005216:	4604      	mov	r4, r0
 8005218:	4608      	mov	r0, r1
 800521a:	602b      	str	r3, [r5, #0]
 800521c:	f7fb ff1f 	bl	800105e <_close>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_close_r+0x1a>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_close_r+0x1a>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	200003f4 	.word	0x200003f4

08005230 <_lseek_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d07      	ldr	r5, [pc, #28]	@ (8005250 <_lseek_r+0x20>)
 8005234:	4604      	mov	r4, r0
 8005236:	4608      	mov	r0, r1
 8005238:	4611      	mov	r1, r2
 800523a:	2200      	movs	r2, #0
 800523c:	602a      	str	r2, [r5, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	f7fb ff34 	bl	80010ac <_lseek>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_lseek_r+0x1e>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_lseek_r+0x1e>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	200003f4 	.word	0x200003f4

08005254 <_read_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d07      	ldr	r5, [pc, #28]	@ (8005274 <_read_r+0x20>)
 8005258:	4604      	mov	r4, r0
 800525a:	4608      	mov	r0, r1
 800525c:	4611      	mov	r1, r2
 800525e:	2200      	movs	r2, #0
 8005260:	602a      	str	r2, [r5, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f7fb fec2 	bl	8000fec <_read>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_read_r+0x1e>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_read_r+0x1e>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	200003f4 	.word	0x200003f4

08005278 <_write_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4d07      	ldr	r5, [pc, #28]	@ (8005298 <_write_r+0x20>)
 800527c:	4604      	mov	r4, r0
 800527e:	4608      	mov	r0, r1
 8005280:	4611      	mov	r1, r2
 8005282:	2200      	movs	r2, #0
 8005284:	602a      	str	r2, [r5, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	f7fb fecd 	bl	8001026 <_write>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d102      	bne.n	8005296 <_write_r+0x1e>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	b103      	cbz	r3, 8005296 <_write_r+0x1e>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	200003f4 	.word	0x200003f4

0800529c <__errno>:
 800529c:	4b01      	ldr	r3, [pc, #4]	@ (80052a4 <__errno+0x8>)
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	2000001c 	.word	0x2000001c

080052a8 <__libc_init_array>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4d0d      	ldr	r5, [pc, #52]	@ (80052e0 <__libc_init_array+0x38>)
 80052ac:	4c0d      	ldr	r4, [pc, #52]	@ (80052e4 <__libc_init_array+0x3c>)
 80052ae:	1b64      	subs	r4, r4, r5
 80052b0:	10a4      	asrs	r4, r4, #2
 80052b2:	2600      	movs	r6, #0
 80052b4:	42a6      	cmp	r6, r4
 80052b6:	d109      	bne.n	80052cc <__libc_init_array+0x24>
 80052b8:	4d0b      	ldr	r5, [pc, #44]	@ (80052e8 <__libc_init_array+0x40>)
 80052ba:	4c0c      	ldr	r4, [pc, #48]	@ (80052ec <__libc_init_array+0x44>)
 80052bc:	f000 fd22 	bl	8005d04 <_init>
 80052c0:	1b64      	subs	r4, r4, r5
 80052c2:	10a4      	asrs	r4, r4, #2
 80052c4:	2600      	movs	r6, #0
 80052c6:	42a6      	cmp	r6, r4
 80052c8:	d105      	bne.n	80052d6 <__libc_init_array+0x2e>
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d0:	4798      	blx	r3
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7ee      	b.n	80052b4 <__libc_init_array+0xc>
 80052d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052da:	4798      	blx	r3
 80052dc:	3601      	adds	r6, #1
 80052de:	e7f2      	b.n	80052c6 <__libc_init_array+0x1e>
 80052e0:	080060e0 	.word	0x080060e0
 80052e4:	080060e0 	.word	0x080060e0
 80052e8:	080060e0 	.word	0x080060e0
 80052ec:	080060e4 	.word	0x080060e4

080052f0 <__retarget_lock_init_recursive>:
 80052f0:	4770      	bx	lr

080052f2 <__retarget_lock_acquire_recursive>:
 80052f2:	4770      	bx	lr

080052f4 <__retarget_lock_release_recursive>:
 80052f4:	4770      	bx	lr
	...

080052f8 <_free_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4605      	mov	r5, r0
 80052fc:	2900      	cmp	r1, #0
 80052fe:	d041      	beq.n	8005384 <_free_r+0x8c>
 8005300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005304:	1f0c      	subs	r4, r1, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	bfb8      	it	lt
 800530a:	18e4      	addlt	r4, r4, r3
 800530c:	f000 f8e0 	bl	80054d0 <__malloc_lock>
 8005310:	4a1d      	ldr	r2, [pc, #116]	@ (8005388 <_free_r+0x90>)
 8005312:	6813      	ldr	r3, [r2, #0]
 8005314:	b933      	cbnz	r3, 8005324 <_free_r+0x2c>
 8005316:	6063      	str	r3, [r4, #4]
 8005318:	6014      	str	r4, [r2, #0]
 800531a:	4628      	mov	r0, r5
 800531c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005320:	f000 b8dc 	b.w	80054dc <__malloc_unlock>
 8005324:	42a3      	cmp	r3, r4
 8005326:	d908      	bls.n	800533a <_free_r+0x42>
 8005328:	6820      	ldr	r0, [r4, #0]
 800532a:	1821      	adds	r1, r4, r0
 800532c:	428b      	cmp	r3, r1
 800532e:	bf01      	itttt	eq
 8005330:	6819      	ldreq	r1, [r3, #0]
 8005332:	685b      	ldreq	r3, [r3, #4]
 8005334:	1809      	addeq	r1, r1, r0
 8005336:	6021      	streq	r1, [r4, #0]
 8005338:	e7ed      	b.n	8005316 <_free_r+0x1e>
 800533a:	461a      	mov	r2, r3
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	b10b      	cbz	r3, 8005344 <_free_r+0x4c>
 8005340:	42a3      	cmp	r3, r4
 8005342:	d9fa      	bls.n	800533a <_free_r+0x42>
 8005344:	6811      	ldr	r1, [r2, #0]
 8005346:	1850      	adds	r0, r2, r1
 8005348:	42a0      	cmp	r0, r4
 800534a:	d10b      	bne.n	8005364 <_free_r+0x6c>
 800534c:	6820      	ldr	r0, [r4, #0]
 800534e:	4401      	add	r1, r0
 8005350:	1850      	adds	r0, r2, r1
 8005352:	4283      	cmp	r3, r0
 8005354:	6011      	str	r1, [r2, #0]
 8005356:	d1e0      	bne.n	800531a <_free_r+0x22>
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	6053      	str	r3, [r2, #4]
 800535e:	4408      	add	r0, r1
 8005360:	6010      	str	r0, [r2, #0]
 8005362:	e7da      	b.n	800531a <_free_r+0x22>
 8005364:	d902      	bls.n	800536c <_free_r+0x74>
 8005366:	230c      	movs	r3, #12
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	e7d6      	b.n	800531a <_free_r+0x22>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	1821      	adds	r1, r4, r0
 8005370:	428b      	cmp	r3, r1
 8005372:	bf04      	itt	eq
 8005374:	6819      	ldreq	r1, [r3, #0]
 8005376:	685b      	ldreq	r3, [r3, #4]
 8005378:	6063      	str	r3, [r4, #4]
 800537a:	bf04      	itt	eq
 800537c:	1809      	addeq	r1, r1, r0
 800537e:	6021      	streq	r1, [r4, #0]
 8005380:	6054      	str	r4, [r2, #4]
 8005382:	e7ca      	b.n	800531a <_free_r+0x22>
 8005384:	bd38      	pop	{r3, r4, r5, pc}
 8005386:	bf00      	nop
 8005388:	20000400 	.word	0x20000400

0800538c <sbrk_aligned>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	4e0f      	ldr	r6, [pc, #60]	@ (80053cc <sbrk_aligned+0x40>)
 8005390:	460c      	mov	r4, r1
 8005392:	6831      	ldr	r1, [r6, #0]
 8005394:	4605      	mov	r5, r0
 8005396:	b911      	cbnz	r1, 800539e <sbrk_aligned+0x12>
 8005398:	f000 fca4 	bl	8005ce4 <_sbrk_r>
 800539c:	6030      	str	r0, [r6, #0]
 800539e:	4621      	mov	r1, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 fc9f 	bl	8005ce4 <_sbrk_r>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	d103      	bne.n	80053b2 <sbrk_aligned+0x26>
 80053aa:	f04f 34ff 	mov.w	r4, #4294967295
 80053ae:	4620      	mov	r0, r4
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	1cc4      	adds	r4, r0, #3
 80053b4:	f024 0403 	bic.w	r4, r4, #3
 80053b8:	42a0      	cmp	r0, r4
 80053ba:	d0f8      	beq.n	80053ae <sbrk_aligned+0x22>
 80053bc:	1a21      	subs	r1, r4, r0
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 fc90 	bl	8005ce4 <_sbrk_r>
 80053c4:	3001      	adds	r0, #1
 80053c6:	d1f2      	bne.n	80053ae <sbrk_aligned+0x22>
 80053c8:	e7ef      	b.n	80053aa <sbrk_aligned+0x1e>
 80053ca:	bf00      	nop
 80053cc:	200003fc 	.word	0x200003fc

080053d0 <_malloc_r>:
 80053d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	1ccd      	adds	r5, r1, #3
 80053d6:	f025 0503 	bic.w	r5, r5, #3
 80053da:	3508      	adds	r5, #8
 80053dc:	2d0c      	cmp	r5, #12
 80053de:	bf38      	it	cc
 80053e0:	250c      	movcc	r5, #12
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	4606      	mov	r6, r0
 80053e6:	db01      	blt.n	80053ec <_malloc_r+0x1c>
 80053e8:	42a9      	cmp	r1, r5
 80053ea:	d904      	bls.n	80053f6 <_malloc_r+0x26>
 80053ec:	230c      	movs	r3, #12
 80053ee:	6033      	str	r3, [r6, #0]
 80053f0:	2000      	movs	r0, #0
 80053f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054cc <_malloc_r+0xfc>
 80053fa:	f000 f869 	bl	80054d0 <__malloc_lock>
 80053fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005402:	461c      	mov	r4, r3
 8005404:	bb44      	cbnz	r4, 8005458 <_malloc_r+0x88>
 8005406:	4629      	mov	r1, r5
 8005408:	4630      	mov	r0, r6
 800540a:	f7ff ffbf 	bl	800538c <sbrk_aligned>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	4604      	mov	r4, r0
 8005412:	d158      	bne.n	80054c6 <_malloc_r+0xf6>
 8005414:	f8d8 4000 	ldr.w	r4, [r8]
 8005418:	4627      	mov	r7, r4
 800541a:	2f00      	cmp	r7, #0
 800541c:	d143      	bne.n	80054a6 <_malloc_r+0xd6>
 800541e:	2c00      	cmp	r4, #0
 8005420:	d04b      	beq.n	80054ba <_malloc_r+0xea>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	4639      	mov	r1, r7
 8005426:	4630      	mov	r0, r6
 8005428:	eb04 0903 	add.w	r9, r4, r3
 800542c:	f000 fc5a 	bl	8005ce4 <_sbrk_r>
 8005430:	4581      	cmp	r9, r0
 8005432:	d142      	bne.n	80054ba <_malloc_r+0xea>
 8005434:	6821      	ldr	r1, [r4, #0]
 8005436:	1a6d      	subs	r5, r5, r1
 8005438:	4629      	mov	r1, r5
 800543a:	4630      	mov	r0, r6
 800543c:	f7ff ffa6 	bl	800538c <sbrk_aligned>
 8005440:	3001      	adds	r0, #1
 8005442:	d03a      	beq.n	80054ba <_malloc_r+0xea>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	442b      	add	r3, r5
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	f8d8 3000 	ldr.w	r3, [r8]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	bb62      	cbnz	r2, 80054ac <_malloc_r+0xdc>
 8005452:	f8c8 7000 	str.w	r7, [r8]
 8005456:	e00f      	b.n	8005478 <_malloc_r+0xa8>
 8005458:	6822      	ldr	r2, [r4, #0]
 800545a:	1b52      	subs	r2, r2, r5
 800545c:	d420      	bmi.n	80054a0 <_malloc_r+0xd0>
 800545e:	2a0b      	cmp	r2, #11
 8005460:	d917      	bls.n	8005492 <_malloc_r+0xc2>
 8005462:	1961      	adds	r1, r4, r5
 8005464:	42a3      	cmp	r3, r4
 8005466:	6025      	str	r5, [r4, #0]
 8005468:	bf18      	it	ne
 800546a:	6059      	strne	r1, [r3, #4]
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	bf08      	it	eq
 8005470:	f8c8 1000 	streq.w	r1, [r8]
 8005474:	5162      	str	r2, [r4, r5]
 8005476:	604b      	str	r3, [r1, #4]
 8005478:	4630      	mov	r0, r6
 800547a:	f000 f82f 	bl	80054dc <__malloc_unlock>
 800547e:	f104 000b 	add.w	r0, r4, #11
 8005482:	1d23      	adds	r3, r4, #4
 8005484:	f020 0007 	bic.w	r0, r0, #7
 8005488:	1ac2      	subs	r2, r0, r3
 800548a:	bf1c      	itt	ne
 800548c:	1a1b      	subne	r3, r3, r0
 800548e:	50a3      	strne	r3, [r4, r2]
 8005490:	e7af      	b.n	80053f2 <_malloc_r+0x22>
 8005492:	6862      	ldr	r2, [r4, #4]
 8005494:	42a3      	cmp	r3, r4
 8005496:	bf0c      	ite	eq
 8005498:	f8c8 2000 	streq.w	r2, [r8]
 800549c:	605a      	strne	r2, [r3, #4]
 800549e:	e7eb      	b.n	8005478 <_malloc_r+0xa8>
 80054a0:	4623      	mov	r3, r4
 80054a2:	6864      	ldr	r4, [r4, #4]
 80054a4:	e7ae      	b.n	8005404 <_malloc_r+0x34>
 80054a6:	463c      	mov	r4, r7
 80054a8:	687f      	ldr	r7, [r7, #4]
 80054aa:	e7b6      	b.n	800541a <_malloc_r+0x4a>
 80054ac:	461a      	mov	r2, r3
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	d1fb      	bne.n	80054ac <_malloc_r+0xdc>
 80054b4:	2300      	movs	r3, #0
 80054b6:	6053      	str	r3, [r2, #4]
 80054b8:	e7de      	b.n	8005478 <_malloc_r+0xa8>
 80054ba:	230c      	movs	r3, #12
 80054bc:	6033      	str	r3, [r6, #0]
 80054be:	4630      	mov	r0, r6
 80054c0:	f000 f80c 	bl	80054dc <__malloc_unlock>
 80054c4:	e794      	b.n	80053f0 <_malloc_r+0x20>
 80054c6:	6005      	str	r5, [r0, #0]
 80054c8:	e7d6      	b.n	8005478 <_malloc_r+0xa8>
 80054ca:	bf00      	nop
 80054cc:	20000400 	.word	0x20000400

080054d0 <__malloc_lock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	@ (80054d8 <__malloc_lock+0x8>)
 80054d2:	f7ff bf0e 	b.w	80052f2 <__retarget_lock_acquire_recursive>
 80054d6:	bf00      	nop
 80054d8:	200003f8 	.word	0x200003f8

080054dc <__malloc_unlock>:
 80054dc:	4801      	ldr	r0, [pc, #4]	@ (80054e4 <__malloc_unlock+0x8>)
 80054de:	f7ff bf09 	b.w	80052f4 <__retarget_lock_release_recursive>
 80054e2:	bf00      	nop
 80054e4:	200003f8 	.word	0x200003f8

080054e8 <__sfputc_r>:
 80054e8:	6893      	ldr	r3, [r2, #8]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	b410      	push	{r4}
 80054f0:	6093      	str	r3, [r2, #8]
 80054f2:	da08      	bge.n	8005506 <__sfputc_r+0x1e>
 80054f4:	6994      	ldr	r4, [r2, #24]
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	db01      	blt.n	80054fe <__sfputc_r+0x16>
 80054fa:	290a      	cmp	r1, #10
 80054fc:	d103      	bne.n	8005506 <__sfputc_r+0x1e>
 80054fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005502:	f7ff bde8 	b.w	80050d6 <__swbuf_r>
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	1c58      	adds	r0, r3, #1
 800550a:	6010      	str	r0, [r2, #0]
 800550c:	7019      	strb	r1, [r3, #0]
 800550e:	4608      	mov	r0, r1
 8005510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005514:	4770      	bx	lr

08005516 <__sfputs_r>:
 8005516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005518:	4606      	mov	r6, r0
 800551a:	460f      	mov	r7, r1
 800551c:	4614      	mov	r4, r2
 800551e:	18d5      	adds	r5, r2, r3
 8005520:	42ac      	cmp	r4, r5
 8005522:	d101      	bne.n	8005528 <__sfputs_r+0x12>
 8005524:	2000      	movs	r0, #0
 8005526:	e007      	b.n	8005538 <__sfputs_r+0x22>
 8005528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552c:	463a      	mov	r2, r7
 800552e:	4630      	mov	r0, r6
 8005530:	f7ff ffda 	bl	80054e8 <__sfputc_r>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d1f3      	bne.n	8005520 <__sfputs_r+0xa>
 8005538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800553c <_vfiprintf_r>:
 800553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005540:	460d      	mov	r5, r1
 8005542:	b09d      	sub	sp, #116	@ 0x74
 8005544:	4614      	mov	r4, r2
 8005546:	4698      	mov	r8, r3
 8005548:	4606      	mov	r6, r0
 800554a:	b118      	cbz	r0, 8005554 <_vfiprintf_r+0x18>
 800554c:	6a03      	ldr	r3, [r0, #32]
 800554e:	b90b      	cbnz	r3, 8005554 <_vfiprintf_r+0x18>
 8005550:	f7ff fcd8 	bl	8004f04 <__sinit>
 8005554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005556:	07d9      	lsls	r1, r3, #31
 8005558:	d405      	bmi.n	8005566 <_vfiprintf_r+0x2a>
 800555a:	89ab      	ldrh	r3, [r5, #12]
 800555c:	059a      	lsls	r2, r3, #22
 800555e:	d402      	bmi.n	8005566 <_vfiprintf_r+0x2a>
 8005560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005562:	f7ff fec6 	bl	80052f2 <__retarget_lock_acquire_recursive>
 8005566:	89ab      	ldrh	r3, [r5, #12]
 8005568:	071b      	lsls	r3, r3, #28
 800556a:	d501      	bpl.n	8005570 <_vfiprintf_r+0x34>
 800556c:	692b      	ldr	r3, [r5, #16]
 800556e:	b99b      	cbnz	r3, 8005598 <_vfiprintf_r+0x5c>
 8005570:	4629      	mov	r1, r5
 8005572:	4630      	mov	r0, r6
 8005574:	f7ff fdee 	bl	8005154 <__swsetup_r>
 8005578:	b170      	cbz	r0, 8005598 <_vfiprintf_r+0x5c>
 800557a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800557c:	07dc      	lsls	r4, r3, #31
 800557e:	d504      	bpl.n	800558a <_vfiprintf_r+0x4e>
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	b01d      	add	sp, #116	@ 0x74
 8005586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558a:	89ab      	ldrh	r3, [r5, #12]
 800558c:	0598      	lsls	r0, r3, #22
 800558e:	d4f7      	bmi.n	8005580 <_vfiprintf_r+0x44>
 8005590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005592:	f7ff feaf 	bl	80052f4 <__retarget_lock_release_recursive>
 8005596:	e7f3      	b.n	8005580 <_vfiprintf_r+0x44>
 8005598:	2300      	movs	r3, #0
 800559a:	9309      	str	r3, [sp, #36]	@ 0x24
 800559c:	2320      	movs	r3, #32
 800559e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80055a6:	2330      	movs	r3, #48	@ 0x30
 80055a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005758 <_vfiprintf_r+0x21c>
 80055ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055b0:	f04f 0901 	mov.w	r9, #1
 80055b4:	4623      	mov	r3, r4
 80055b6:	469a      	mov	sl, r3
 80055b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055bc:	b10a      	cbz	r2, 80055c2 <_vfiprintf_r+0x86>
 80055be:	2a25      	cmp	r2, #37	@ 0x25
 80055c0:	d1f9      	bne.n	80055b6 <_vfiprintf_r+0x7a>
 80055c2:	ebba 0b04 	subs.w	fp, sl, r4
 80055c6:	d00b      	beq.n	80055e0 <_vfiprintf_r+0xa4>
 80055c8:	465b      	mov	r3, fp
 80055ca:	4622      	mov	r2, r4
 80055cc:	4629      	mov	r1, r5
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7ff ffa1 	bl	8005516 <__sfputs_r>
 80055d4:	3001      	adds	r0, #1
 80055d6:	f000 80a7 	beq.w	8005728 <_vfiprintf_r+0x1ec>
 80055da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055dc:	445a      	add	r2, fp
 80055de:	9209      	str	r2, [sp, #36]	@ 0x24
 80055e0:	f89a 3000 	ldrb.w	r3, [sl]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 809f 	beq.w	8005728 <_vfiprintf_r+0x1ec>
 80055ea:	2300      	movs	r3, #0
 80055ec:	f04f 32ff 	mov.w	r2, #4294967295
 80055f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055f4:	f10a 0a01 	add.w	sl, sl, #1
 80055f8:	9304      	str	r3, [sp, #16]
 80055fa:	9307      	str	r3, [sp, #28]
 80055fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005600:	931a      	str	r3, [sp, #104]	@ 0x68
 8005602:	4654      	mov	r4, sl
 8005604:	2205      	movs	r2, #5
 8005606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560a:	4853      	ldr	r0, [pc, #332]	@ (8005758 <_vfiprintf_r+0x21c>)
 800560c:	f7fa fe08 	bl	8000220 <memchr>
 8005610:	9a04      	ldr	r2, [sp, #16]
 8005612:	b9d8      	cbnz	r0, 800564c <_vfiprintf_r+0x110>
 8005614:	06d1      	lsls	r1, r2, #27
 8005616:	bf44      	itt	mi
 8005618:	2320      	movmi	r3, #32
 800561a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800561e:	0713      	lsls	r3, r2, #28
 8005620:	bf44      	itt	mi
 8005622:	232b      	movmi	r3, #43	@ 0x2b
 8005624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005628:	f89a 3000 	ldrb.w	r3, [sl]
 800562c:	2b2a      	cmp	r3, #42	@ 0x2a
 800562e:	d015      	beq.n	800565c <_vfiprintf_r+0x120>
 8005630:	9a07      	ldr	r2, [sp, #28]
 8005632:	4654      	mov	r4, sl
 8005634:	2000      	movs	r0, #0
 8005636:	f04f 0c0a 	mov.w	ip, #10
 800563a:	4621      	mov	r1, r4
 800563c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005640:	3b30      	subs	r3, #48	@ 0x30
 8005642:	2b09      	cmp	r3, #9
 8005644:	d94b      	bls.n	80056de <_vfiprintf_r+0x1a2>
 8005646:	b1b0      	cbz	r0, 8005676 <_vfiprintf_r+0x13a>
 8005648:	9207      	str	r2, [sp, #28]
 800564a:	e014      	b.n	8005676 <_vfiprintf_r+0x13a>
 800564c:	eba0 0308 	sub.w	r3, r0, r8
 8005650:	fa09 f303 	lsl.w	r3, r9, r3
 8005654:	4313      	orrs	r3, r2
 8005656:	9304      	str	r3, [sp, #16]
 8005658:	46a2      	mov	sl, r4
 800565a:	e7d2      	b.n	8005602 <_vfiprintf_r+0xc6>
 800565c:	9b03      	ldr	r3, [sp, #12]
 800565e:	1d19      	adds	r1, r3, #4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	9103      	str	r1, [sp, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	bfbb      	ittet	lt
 8005668:	425b      	neglt	r3, r3
 800566a:	f042 0202 	orrlt.w	r2, r2, #2
 800566e:	9307      	strge	r3, [sp, #28]
 8005670:	9307      	strlt	r3, [sp, #28]
 8005672:	bfb8      	it	lt
 8005674:	9204      	strlt	r2, [sp, #16]
 8005676:	7823      	ldrb	r3, [r4, #0]
 8005678:	2b2e      	cmp	r3, #46	@ 0x2e
 800567a:	d10a      	bne.n	8005692 <_vfiprintf_r+0x156>
 800567c:	7863      	ldrb	r3, [r4, #1]
 800567e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005680:	d132      	bne.n	80056e8 <_vfiprintf_r+0x1ac>
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	1d1a      	adds	r2, r3, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	9203      	str	r2, [sp, #12]
 800568a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800568e:	3402      	adds	r4, #2
 8005690:	9305      	str	r3, [sp, #20]
 8005692:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005768 <_vfiprintf_r+0x22c>
 8005696:	7821      	ldrb	r1, [r4, #0]
 8005698:	2203      	movs	r2, #3
 800569a:	4650      	mov	r0, sl
 800569c:	f7fa fdc0 	bl	8000220 <memchr>
 80056a0:	b138      	cbz	r0, 80056b2 <_vfiprintf_r+0x176>
 80056a2:	9b04      	ldr	r3, [sp, #16]
 80056a4:	eba0 000a 	sub.w	r0, r0, sl
 80056a8:	2240      	movs	r2, #64	@ 0x40
 80056aa:	4082      	lsls	r2, r0
 80056ac:	4313      	orrs	r3, r2
 80056ae:	3401      	adds	r4, #1
 80056b0:	9304      	str	r3, [sp, #16]
 80056b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b6:	4829      	ldr	r0, [pc, #164]	@ (800575c <_vfiprintf_r+0x220>)
 80056b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056bc:	2206      	movs	r2, #6
 80056be:	f7fa fdaf 	bl	8000220 <memchr>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d03f      	beq.n	8005746 <_vfiprintf_r+0x20a>
 80056c6:	4b26      	ldr	r3, [pc, #152]	@ (8005760 <_vfiprintf_r+0x224>)
 80056c8:	bb1b      	cbnz	r3, 8005712 <_vfiprintf_r+0x1d6>
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	3307      	adds	r3, #7
 80056ce:	f023 0307 	bic.w	r3, r3, #7
 80056d2:	3308      	adds	r3, #8
 80056d4:	9303      	str	r3, [sp, #12]
 80056d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d8:	443b      	add	r3, r7
 80056da:	9309      	str	r3, [sp, #36]	@ 0x24
 80056dc:	e76a      	b.n	80055b4 <_vfiprintf_r+0x78>
 80056de:	fb0c 3202 	mla	r2, ip, r2, r3
 80056e2:	460c      	mov	r4, r1
 80056e4:	2001      	movs	r0, #1
 80056e6:	e7a8      	b.n	800563a <_vfiprintf_r+0xfe>
 80056e8:	2300      	movs	r3, #0
 80056ea:	3401      	adds	r4, #1
 80056ec:	9305      	str	r3, [sp, #20]
 80056ee:	4619      	mov	r1, r3
 80056f0:	f04f 0c0a 	mov.w	ip, #10
 80056f4:	4620      	mov	r0, r4
 80056f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056fa:	3a30      	subs	r2, #48	@ 0x30
 80056fc:	2a09      	cmp	r2, #9
 80056fe:	d903      	bls.n	8005708 <_vfiprintf_r+0x1cc>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0c6      	beq.n	8005692 <_vfiprintf_r+0x156>
 8005704:	9105      	str	r1, [sp, #20]
 8005706:	e7c4      	b.n	8005692 <_vfiprintf_r+0x156>
 8005708:	fb0c 2101 	mla	r1, ip, r1, r2
 800570c:	4604      	mov	r4, r0
 800570e:	2301      	movs	r3, #1
 8005710:	e7f0      	b.n	80056f4 <_vfiprintf_r+0x1b8>
 8005712:	ab03      	add	r3, sp, #12
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	462a      	mov	r2, r5
 8005718:	4b12      	ldr	r3, [pc, #72]	@ (8005764 <_vfiprintf_r+0x228>)
 800571a:	a904      	add	r1, sp, #16
 800571c:	4630      	mov	r0, r6
 800571e:	f3af 8000 	nop.w
 8005722:	4607      	mov	r7, r0
 8005724:	1c78      	adds	r0, r7, #1
 8005726:	d1d6      	bne.n	80056d6 <_vfiprintf_r+0x19a>
 8005728:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800572a:	07d9      	lsls	r1, r3, #31
 800572c:	d405      	bmi.n	800573a <_vfiprintf_r+0x1fe>
 800572e:	89ab      	ldrh	r3, [r5, #12]
 8005730:	059a      	lsls	r2, r3, #22
 8005732:	d402      	bmi.n	800573a <_vfiprintf_r+0x1fe>
 8005734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005736:	f7ff fddd 	bl	80052f4 <__retarget_lock_release_recursive>
 800573a:	89ab      	ldrh	r3, [r5, #12]
 800573c:	065b      	lsls	r3, r3, #25
 800573e:	f53f af1f 	bmi.w	8005580 <_vfiprintf_r+0x44>
 8005742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005744:	e71e      	b.n	8005584 <_vfiprintf_r+0x48>
 8005746:	ab03      	add	r3, sp, #12
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	462a      	mov	r2, r5
 800574c:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <_vfiprintf_r+0x228>)
 800574e:	a904      	add	r1, sp, #16
 8005750:	4630      	mov	r0, r6
 8005752:	f000 f879 	bl	8005848 <_printf_i>
 8005756:	e7e4      	b.n	8005722 <_vfiprintf_r+0x1e6>
 8005758:	080060a4 	.word	0x080060a4
 800575c:	080060ae 	.word	0x080060ae
 8005760:	00000000 	.word	0x00000000
 8005764:	08005517 	.word	0x08005517
 8005768:	080060aa 	.word	0x080060aa

0800576c <_printf_common>:
 800576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	4616      	mov	r6, r2
 8005772:	4698      	mov	r8, r3
 8005774:	688a      	ldr	r2, [r1, #8]
 8005776:	690b      	ldr	r3, [r1, #16]
 8005778:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800577c:	4293      	cmp	r3, r2
 800577e:	bfb8      	it	lt
 8005780:	4613      	movlt	r3, r2
 8005782:	6033      	str	r3, [r6, #0]
 8005784:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005788:	4607      	mov	r7, r0
 800578a:	460c      	mov	r4, r1
 800578c:	b10a      	cbz	r2, 8005792 <_printf_common+0x26>
 800578e:	3301      	adds	r3, #1
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	0699      	lsls	r1, r3, #26
 8005796:	bf42      	ittt	mi
 8005798:	6833      	ldrmi	r3, [r6, #0]
 800579a:	3302      	addmi	r3, #2
 800579c:	6033      	strmi	r3, [r6, #0]
 800579e:	6825      	ldr	r5, [r4, #0]
 80057a0:	f015 0506 	ands.w	r5, r5, #6
 80057a4:	d106      	bne.n	80057b4 <_printf_common+0x48>
 80057a6:	f104 0a19 	add.w	sl, r4, #25
 80057aa:	68e3      	ldr	r3, [r4, #12]
 80057ac:	6832      	ldr	r2, [r6, #0]
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	dc26      	bgt.n	8005802 <_printf_common+0x96>
 80057b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	3b00      	subs	r3, #0
 80057bc:	bf18      	it	ne
 80057be:	2301      	movne	r3, #1
 80057c0:	0692      	lsls	r2, r2, #26
 80057c2:	d42b      	bmi.n	800581c <_printf_common+0xb0>
 80057c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057c8:	4641      	mov	r1, r8
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c8      	blx	r9
 80057ce:	3001      	adds	r0, #1
 80057d0:	d01e      	beq.n	8005810 <_printf_common+0xa4>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	6922      	ldr	r2, [r4, #16]
 80057d6:	f003 0306 	and.w	r3, r3, #6
 80057da:	2b04      	cmp	r3, #4
 80057dc:	bf02      	ittt	eq
 80057de:	68e5      	ldreq	r5, [r4, #12]
 80057e0:	6833      	ldreq	r3, [r6, #0]
 80057e2:	1aed      	subeq	r5, r5, r3
 80057e4:	68a3      	ldr	r3, [r4, #8]
 80057e6:	bf0c      	ite	eq
 80057e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ec:	2500      	movne	r5, #0
 80057ee:	4293      	cmp	r3, r2
 80057f0:	bfc4      	itt	gt
 80057f2:	1a9b      	subgt	r3, r3, r2
 80057f4:	18ed      	addgt	r5, r5, r3
 80057f6:	2600      	movs	r6, #0
 80057f8:	341a      	adds	r4, #26
 80057fa:	42b5      	cmp	r5, r6
 80057fc:	d11a      	bne.n	8005834 <_printf_common+0xc8>
 80057fe:	2000      	movs	r0, #0
 8005800:	e008      	b.n	8005814 <_printf_common+0xa8>
 8005802:	2301      	movs	r3, #1
 8005804:	4652      	mov	r2, sl
 8005806:	4641      	mov	r1, r8
 8005808:	4638      	mov	r0, r7
 800580a:	47c8      	blx	r9
 800580c:	3001      	adds	r0, #1
 800580e:	d103      	bne.n	8005818 <_printf_common+0xac>
 8005810:	f04f 30ff 	mov.w	r0, #4294967295
 8005814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005818:	3501      	adds	r5, #1
 800581a:	e7c6      	b.n	80057aa <_printf_common+0x3e>
 800581c:	18e1      	adds	r1, r4, r3
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	2030      	movs	r0, #48	@ 0x30
 8005822:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005826:	4422      	add	r2, r4
 8005828:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800582c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005830:	3302      	adds	r3, #2
 8005832:	e7c7      	b.n	80057c4 <_printf_common+0x58>
 8005834:	2301      	movs	r3, #1
 8005836:	4622      	mov	r2, r4
 8005838:	4641      	mov	r1, r8
 800583a:	4638      	mov	r0, r7
 800583c:	47c8      	blx	r9
 800583e:	3001      	adds	r0, #1
 8005840:	d0e6      	beq.n	8005810 <_printf_common+0xa4>
 8005842:	3601      	adds	r6, #1
 8005844:	e7d9      	b.n	80057fa <_printf_common+0x8e>
	...

08005848 <_printf_i>:
 8005848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	7e0f      	ldrb	r7, [r1, #24]
 800584e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005850:	2f78      	cmp	r7, #120	@ 0x78
 8005852:	4691      	mov	r9, r2
 8005854:	4680      	mov	r8, r0
 8005856:	460c      	mov	r4, r1
 8005858:	469a      	mov	sl, r3
 800585a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800585e:	d807      	bhi.n	8005870 <_printf_i+0x28>
 8005860:	2f62      	cmp	r7, #98	@ 0x62
 8005862:	d80a      	bhi.n	800587a <_printf_i+0x32>
 8005864:	2f00      	cmp	r7, #0
 8005866:	f000 80d1 	beq.w	8005a0c <_printf_i+0x1c4>
 800586a:	2f58      	cmp	r7, #88	@ 0x58
 800586c:	f000 80b8 	beq.w	80059e0 <_printf_i+0x198>
 8005870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005874:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005878:	e03a      	b.n	80058f0 <_printf_i+0xa8>
 800587a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800587e:	2b15      	cmp	r3, #21
 8005880:	d8f6      	bhi.n	8005870 <_printf_i+0x28>
 8005882:	a101      	add	r1, pc, #4	@ (adr r1, 8005888 <_printf_i+0x40>)
 8005884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005888:	080058e1 	.word	0x080058e1
 800588c:	080058f5 	.word	0x080058f5
 8005890:	08005871 	.word	0x08005871
 8005894:	08005871 	.word	0x08005871
 8005898:	08005871 	.word	0x08005871
 800589c:	08005871 	.word	0x08005871
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	08005871 	.word	0x08005871
 80058a8:	08005871 	.word	0x08005871
 80058ac:	08005871 	.word	0x08005871
 80058b0:	08005871 	.word	0x08005871
 80058b4:	080059f3 	.word	0x080059f3
 80058b8:	0800591f 	.word	0x0800591f
 80058bc:	080059ad 	.word	0x080059ad
 80058c0:	08005871 	.word	0x08005871
 80058c4:	08005871 	.word	0x08005871
 80058c8:	08005a15 	.word	0x08005a15
 80058cc:	08005871 	.word	0x08005871
 80058d0:	0800591f 	.word	0x0800591f
 80058d4:	08005871 	.word	0x08005871
 80058d8:	08005871 	.word	0x08005871
 80058dc:	080059b5 	.word	0x080059b5
 80058e0:	6833      	ldr	r3, [r6, #0]
 80058e2:	1d1a      	adds	r2, r3, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6032      	str	r2, [r6, #0]
 80058e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058f0:	2301      	movs	r3, #1
 80058f2:	e09c      	b.n	8005a2e <_printf_i+0x1e6>
 80058f4:	6833      	ldr	r3, [r6, #0]
 80058f6:	6820      	ldr	r0, [r4, #0]
 80058f8:	1d19      	adds	r1, r3, #4
 80058fa:	6031      	str	r1, [r6, #0]
 80058fc:	0606      	lsls	r6, r0, #24
 80058fe:	d501      	bpl.n	8005904 <_printf_i+0xbc>
 8005900:	681d      	ldr	r5, [r3, #0]
 8005902:	e003      	b.n	800590c <_printf_i+0xc4>
 8005904:	0645      	lsls	r5, r0, #25
 8005906:	d5fb      	bpl.n	8005900 <_printf_i+0xb8>
 8005908:	f9b3 5000 	ldrsh.w	r5, [r3]
 800590c:	2d00      	cmp	r5, #0
 800590e:	da03      	bge.n	8005918 <_printf_i+0xd0>
 8005910:	232d      	movs	r3, #45	@ 0x2d
 8005912:	426d      	negs	r5, r5
 8005914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005918:	4858      	ldr	r0, [pc, #352]	@ (8005a7c <_printf_i+0x234>)
 800591a:	230a      	movs	r3, #10
 800591c:	e011      	b.n	8005942 <_printf_i+0xfa>
 800591e:	6821      	ldr	r1, [r4, #0]
 8005920:	6833      	ldr	r3, [r6, #0]
 8005922:	0608      	lsls	r0, r1, #24
 8005924:	f853 5b04 	ldr.w	r5, [r3], #4
 8005928:	d402      	bmi.n	8005930 <_printf_i+0xe8>
 800592a:	0649      	lsls	r1, r1, #25
 800592c:	bf48      	it	mi
 800592e:	b2ad      	uxthmi	r5, r5
 8005930:	2f6f      	cmp	r7, #111	@ 0x6f
 8005932:	4852      	ldr	r0, [pc, #328]	@ (8005a7c <_printf_i+0x234>)
 8005934:	6033      	str	r3, [r6, #0]
 8005936:	bf14      	ite	ne
 8005938:	230a      	movne	r3, #10
 800593a:	2308      	moveq	r3, #8
 800593c:	2100      	movs	r1, #0
 800593e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005942:	6866      	ldr	r6, [r4, #4]
 8005944:	60a6      	str	r6, [r4, #8]
 8005946:	2e00      	cmp	r6, #0
 8005948:	db05      	blt.n	8005956 <_printf_i+0x10e>
 800594a:	6821      	ldr	r1, [r4, #0]
 800594c:	432e      	orrs	r6, r5
 800594e:	f021 0104 	bic.w	r1, r1, #4
 8005952:	6021      	str	r1, [r4, #0]
 8005954:	d04b      	beq.n	80059ee <_printf_i+0x1a6>
 8005956:	4616      	mov	r6, r2
 8005958:	fbb5 f1f3 	udiv	r1, r5, r3
 800595c:	fb03 5711 	mls	r7, r3, r1, r5
 8005960:	5dc7      	ldrb	r7, [r0, r7]
 8005962:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005966:	462f      	mov	r7, r5
 8005968:	42bb      	cmp	r3, r7
 800596a:	460d      	mov	r5, r1
 800596c:	d9f4      	bls.n	8005958 <_printf_i+0x110>
 800596e:	2b08      	cmp	r3, #8
 8005970:	d10b      	bne.n	800598a <_printf_i+0x142>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	07df      	lsls	r7, r3, #31
 8005976:	d508      	bpl.n	800598a <_printf_i+0x142>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	6861      	ldr	r1, [r4, #4]
 800597c:	4299      	cmp	r1, r3
 800597e:	bfde      	ittt	le
 8005980:	2330      	movle	r3, #48	@ 0x30
 8005982:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005986:	f106 36ff 	addle.w	r6, r6, #4294967295
 800598a:	1b92      	subs	r2, r2, r6
 800598c:	6122      	str	r2, [r4, #16]
 800598e:	f8cd a000 	str.w	sl, [sp]
 8005992:	464b      	mov	r3, r9
 8005994:	aa03      	add	r2, sp, #12
 8005996:	4621      	mov	r1, r4
 8005998:	4640      	mov	r0, r8
 800599a:	f7ff fee7 	bl	800576c <_printf_common>
 800599e:	3001      	adds	r0, #1
 80059a0:	d14a      	bne.n	8005a38 <_printf_i+0x1f0>
 80059a2:	f04f 30ff 	mov.w	r0, #4294967295
 80059a6:	b004      	add	sp, #16
 80059a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	f043 0320 	orr.w	r3, r3, #32
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	4832      	ldr	r0, [pc, #200]	@ (8005a80 <_printf_i+0x238>)
 80059b6:	2778      	movs	r7, #120	@ 0x78
 80059b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	6831      	ldr	r1, [r6, #0]
 80059c0:	061f      	lsls	r7, r3, #24
 80059c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80059c6:	d402      	bmi.n	80059ce <_printf_i+0x186>
 80059c8:	065f      	lsls	r7, r3, #25
 80059ca:	bf48      	it	mi
 80059cc:	b2ad      	uxthmi	r5, r5
 80059ce:	6031      	str	r1, [r6, #0]
 80059d0:	07d9      	lsls	r1, r3, #31
 80059d2:	bf44      	itt	mi
 80059d4:	f043 0320 	orrmi.w	r3, r3, #32
 80059d8:	6023      	strmi	r3, [r4, #0]
 80059da:	b11d      	cbz	r5, 80059e4 <_printf_i+0x19c>
 80059dc:	2310      	movs	r3, #16
 80059de:	e7ad      	b.n	800593c <_printf_i+0xf4>
 80059e0:	4826      	ldr	r0, [pc, #152]	@ (8005a7c <_printf_i+0x234>)
 80059e2:	e7e9      	b.n	80059b8 <_printf_i+0x170>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	f023 0320 	bic.w	r3, r3, #32
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	e7f6      	b.n	80059dc <_printf_i+0x194>
 80059ee:	4616      	mov	r6, r2
 80059f0:	e7bd      	b.n	800596e <_printf_i+0x126>
 80059f2:	6833      	ldr	r3, [r6, #0]
 80059f4:	6825      	ldr	r5, [r4, #0]
 80059f6:	6961      	ldr	r1, [r4, #20]
 80059f8:	1d18      	adds	r0, r3, #4
 80059fa:	6030      	str	r0, [r6, #0]
 80059fc:	062e      	lsls	r6, r5, #24
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	d501      	bpl.n	8005a06 <_printf_i+0x1be>
 8005a02:	6019      	str	r1, [r3, #0]
 8005a04:	e002      	b.n	8005a0c <_printf_i+0x1c4>
 8005a06:	0668      	lsls	r0, r5, #25
 8005a08:	d5fb      	bpl.n	8005a02 <_printf_i+0x1ba>
 8005a0a:	8019      	strh	r1, [r3, #0]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	6123      	str	r3, [r4, #16]
 8005a10:	4616      	mov	r6, r2
 8005a12:	e7bc      	b.n	800598e <_printf_i+0x146>
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	1d1a      	adds	r2, r3, #4
 8005a18:	6032      	str	r2, [r6, #0]
 8005a1a:	681e      	ldr	r6, [r3, #0]
 8005a1c:	6862      	ldr	r2, [r4, #4]
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4630      	mov	r0, r6
 8005a22:	f7fa fbfd 	bl	8000220 <memchr>
 8005a26:	b108      	cbz	r0, 8005a2c <_printf_i+0x1e4>
 8005a28:	1b80      	subs	r0, r0, r6
 8005a2a:	6060      	str	r0, [r4, #4]
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	6123      	str	r3, [r4, #16]
 8005a30:	2300      	movs	r3, #0
 8005a32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a36:	e7aa      	b.n	800598e <_printf_i+0x146>
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4640      	mov	r0, r8
 8005a40:	47d0      	blx	sl
 8005a42:	3001      	adds	r0, #1
 8005a44:	d0ad      	beq.n	80059a2 <_printf_i+0x15a>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	079b      	lsls	r3, r3, #30
 8005a4a:	d413      	bmi.n	8005a74 <_printf_i+0x22c>
 8005a4c:	68e0      	ldr	r0, [r4, #12]
 8005a4e:	9b03      	ldr	r3, [sp, #12]
 8005a50:	4298      	cmp	r0, r3
 8005a52:	bfb8      	it	lt
 8005a54:	4618      	movlt	r0, r3
 8005a56:	e7a6      	b.n	80059a6 <_printf_i+0x15e>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4632      	mov	r2, r6
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4640      	mov	r0, r8
 8005a60:	47d0      	blx	sl
 8005a62:	3001      	adds	r0, #1
 8005a64:	d09d      	beq.n	80059a2 <_printf_i+0x15a>
 8005a66:	3501      	adds	r5, #1
 8005a68:	68e3      	ldr	r3, [r4, #12]
 8005a6a:	9903      	ldr	r1, [sp, #12]
 8005a6c:	1a5b      	subs	r3, r3, r1
 8005a6e:	42ab      	cmp	r3, r5
 8005a70:	dcf2      	bgt.n	8005a58 <_printf_i+0x210>
 8005a72:	e7eb      	b.n	8005a4c <_printf_i+0x204>
 8005a74:	2500      	movs	r5, #0
 8005a76:	f104 0619 	add.w	r6, r4, #25
 8005a7a:	e7f5      	b.n	8005a68 <_printf_i+0x220>
 8005a7c:	080060b5 	.word	0x080060b5
 8005a80:	080060c6 	.word	0x080060c6

08005a84 <__sflush_r>:
 8005a84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8c:	0716      	lsls	r6, r2, #28
 8005a8e:	4605      	mov	r5, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	d454      	bmi.n	8005b3e <__sflush_r+0xba>
 8005a94:	684b      	ldr	r3, [r1, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dc02      	bgt.n	8005aa0 <__sflush_r+0x1c>
 8005a9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dd48      	ble.n	8005b32 <__sflush_r+0xae>
 8005aa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	d045      	beq.n	8005b32 <__sflush_r+0xae>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005aac:	682f      	ldr	r7, [r5, #0]
 8005aae:	6a21      	ldr	r1, [r4, #32]
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	d030      	beq.n	8005b16 <__sflush_r+0x92>
 8005ab4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	0759      	lsls	r1, r3, #29
 8005aba:	d505      	bpl.n	8005ac8 <__sflush_r+0x44>
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ac2:	b10b      	cbz	r3, 8005ac8 <__sflush_r+0x44>
 8005ac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	2300      	movs	r3, #0
 8005aca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005acc:	6a21      	ldr	r1, [r4, #32]
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b0      	blx	r6
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	d106      	bne.n	8005ae6 <__sflush_r+0x62>
 8005ad8:	6829      	ldr	r1, [r5, #0]
 8005ada:	291d      	cmp	r1, #29
 8005adc:	d82b      	bhi.n	8005b36 <__sflush_r+0xb2>
 8005ade:	4a2a      	ldr	r2, [pc, #168]	@ (8005b88 <__sflush_r+0x104>)
 8005ae0:	40ca      	lsrs	r2, r1
 8005ae2:	07d6      	lsls	r6, r2, #31
 8005ae4:	d527      	bpl.n	8005b36 <__sflush_r+0xb2>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	6062      	str	r2, [r4, #4]
 8005aea:	04d9      	lsls	r1, r3, #19
 8005aec:	6922      	ldr	r2, [r4, #16]
 8005aee:	6022      	str	r2, [r4, #0]
 8005af0:	d504      	bpl.n	8005afc <__sflush_r+0x78>
 8005af2:	1c42      	adds	r2, r0, #1
 8005af4:	d101      	bne.n	8005afa <__sflush_r+0x76>
 8005af6:	682b      	ldr	r3, [r5, #0]
 8005af8:	b903      	cbnz	r3, 8005afc <__sflush_r+0x78>
 8005afa:	6560      	str	r0, [r4, #84]	@ 0x54
 8005afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005afe:	602f      	str	r7, [r5, #0]
 8005b00:	b1b9      	cbz	r1, 8005b32 <__sflush_r+0xae>
 8005b02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b06:	4299      	cmp	r1, r3
 8005b08:	d002      	beq.n	8005b10 <__sflush_r+0x8c>
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7ff fbf4 	bl	80052f8 <_free_r>
 8005b10:	2300      	movs	r3, #0
 8005b12:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b14:	e00d      	b.n	8005b32 <__sflush_r+0xae>
 8005b16:	2301      	movs	r3, #1
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b0      	blx	r6
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	1c50      	adds	r0, r2, #1
 8005b20:	d1c9      	bne.n	8005ab6 <__sflush_r+0x32>
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0c6      	beq.n	8005ab6 <__sflush_r+0x32>
 8005b28:	2b1d      	cmp	r3, #29
 8005b2a:	d001      	beq.n	8005b30 <__sflush_r+0xac>
 8005b2c:	2b16      	cmp	r3, #22
 8005b2e:	d11e      	bne.n	8005b6e <__sflush_r+0xea>
 8005b30:	602f      	str	r7, [r5, #0]
 8005b32:	2000      	movs	r0, #0
 8005b34:	e022      	b.n	8005b7c <__sflush_r+0xf8>
 8005b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b3a:	b21b      	sxth	r3, r3
 8005b3c:	e01b      	b.n	8005b76 <__sflush_r+0xf2>
 8005b3e:	690f      	ldr	r7, [r1, #16]
 8005b40:	2f00      	cmp	r7, #0
 8005b42:	d0f6      	beq.n	8005b32 <__sflush_r+0xae>
 8005b44:	0793      	lsls	r3, r2, #30
 8005b46:	680e      	ldr	r6, [r1, #0]
 8005b48:	bf08      	it	eq
 8005b4a:	694b      	ldreq	r3, [r1, #20]
 8005b4c:	600f      	str	r7, [r1, #0]
 8005b4e:	bf18      	it	ne
 8005b50:	2300      	movne	r3, #0
 8005b52:	eba6 0807 	sub.w	r8, r6, r7
 8005b56:	608b      	str	r3, [r1, #8]
 8005b58:	f1b8 0f00 	cmp.w	r8, #0
 8005b5c:	dde9      	ble.n	8005b32 <__sflush_r+0xae>
 8005b5e:	6a21      	ldr	r1, [r4, #32]
 8005b60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b62:	4643      	mov	r3, r8
 8005b64:	463a      	mov	r2, r7
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b0      	blx	r6
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	dc08      	bgt.n	8005b80 <__sflush_r+0xfc>
 8005b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b76:	81a3      	strh	r3, [r4, #12]
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b80:	4407      	add	r7, r0
 8005b82:	eba8 0800 	sub.w	r8, r8, r0
 8005b86:	e7e7      	b.n	8005b58 <__sflush_r+0xd4>
 8005b88:	20400001 	.word	0x20400001

08005b8c <_fflush_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	690b      	ldr	r3, [r1, #16]
 8005b90:	4605      	mov	r5, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	b913      	cbnz	r3, 8005b9c <_fflush_r+0x10>
 8005b96:	2500      	movs	r5, #0
 8005b98:	4628      	mov	r0, r5
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
 8005b9c:	b118      	cbz	r0, 8005ba6 <_fflush_r+0x1a>
 8005b9e:	6a03      	ldr	r3, [r0, #32]
 8005ba0:	b90b      	cbnz	r3, 8005ba6 <_fflush_r+0x1a>
 8005ba2:	f7ff f9af 	bl	8004f04 <__sinit>
 8005ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f3      	beq.n	8005b96 <_fflush_r+0xa>
 8005bae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bb0:	07d0      	lsls	r0, r2, #31
 8005bb2:	d404      	bmi.n	8005bbe <_fflush_r+0x32>
 8005bb4:	0599      	lsls	r1, r3, #22
 8005bb6:	d402      	bmi.n	8005bbe <_fflush_r+0x32>
 8005bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bba:	f7ff fb9a 	bl	80052f2 <__retarget_lock_acquire_recursive>
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	f7ff ff5f 	bl	8005a84 <__sflush_r>
 8005bc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bc8:	07da      	lsls	r2, r3, #31
 8005bca:	4605      	mov	r5, r0
 8005bcc:	d4e4      	bmi.n	8005b98 <_fflush_r+0xc>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	059b      	lsls	r3, r3, #22
 8005bd2:	d4e1      	bmi.n	8005b98 <_fflush_r+0xc>
 8005bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bd6:	f7ff fb8d 	bl	80052f4 <__retarget_lock_release_recursive>
 8005bda:	e7dd      	b.n	8005b98 <_fflush_r+0xc>

08005bdc <__swhatbuf_r>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	460c      	mov	r4, r1
 8005be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be4:	2900      	cmp	r1, #0
 8005be6:	b096      	sub	sp, #88	@ 0x58
 8005be8:	4615      	mov	r5, r2
 8005bea:	461e      	mov	r6, r3
 8005bec:	da0d      	bge.n	8005c0a <__swhatbuf_r+0x2e>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bf4:	f04f 0100 	mov.w	r1, #0
 8005bf8:	bf14      	ite	ne
 8005bfa:	2340      	movne	r3, #64	@ 0x40
 8005bfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c00:	2000      	movs	r0, #0
 8005c02:	6031      	str	r1, [r6, #0]
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	b016      	add	sp, #88	@ 0x58
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
 8005c0a:	466a      	mov	r2, sp
 8005c0c:	f000 f848 	bl	8005ca0 <_fstat_r>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	dbec      	blt.n	8005bee <__swhatbuf_r+0x12>
 8005c14:	9901      	ldr	r1, [sp, #4]
 8005c16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c1e:	4259      	negs	r1, r3
 8005c20:	4159      	adcs	r1, r3
 8005c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c26:	e7eb      	b.n	8005c00 <__swhatbuf_r+0x24>

08005c28 <__smakebuf_r>:
 8005c28:	898b      	ldrh	r3, [r1, #12]
 8005c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c2c:	079d      	lsls	r5, r3, #30
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	d507      	bpl.n	8005c44 <__smakebuf_r+0x1c>
 8005c34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	6163      	str	r3, [r4, #20]
 8005c40:	b003      	add	sp, #12
 8005c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c44:	ab01      	add	r3, sp, #4
 8005c46:	466a      	mov	r2, sp
 8005c48:	f7ff ffc8 	bl	8005bdc <__swhatbuf_r>
 8005c4c:	9f00      	ldr	r7, [sp, #0]
 8005c4e:	4605      	mov	r5, r0
 8005c50:	4639      	mov	r1, r7
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7ff fbbc 	bl	80053d0 <_malloc_r>
 8005c58:	b948      	cbnz	r0, 8005c6e <__smakebuf_r+0x46>
 8005c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5e:	059a      	lsls	r2, r3, #22
 8005c60:	d4ee      	bmi.n	8005c40 <__smakebuf_r+0x18>
 8005c62:	f023 0303 	bic.w	r3, r3, #3
 8005c66:	f043 0302 	orr.w	r3, r3, #2
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	e7e2      	b.n	8005c34 <__smakebuf_r+0xc>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	6020      	str	r0, [r4, #0]
 8005c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c7e:	b15b      	cbz	r3, 8005c98 <__smakebuf_r+0x70>
 8005c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c84:	4630      	mov	r0, r6
 8005c86:	f000 f81d 	bl	8005cc4 <_isatty_r>
 8005c8a:	b128      	cbz	r0, 8005c98 <__smakebuf_r+0x70>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	431d      	orrs	r5, r3
 8005c9c:	81a5      	strh	r5, [r4, #12]
 8005c9e:	e7cf      	b.n	8005c40 <__smakebuf_r+0x18>

08005ca0 <_fstat_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4d07      	ldr	r5, [pc, #28]	@ (8005cc0 <_fstat_r+0x20>)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	4611      	mov	r1, r2
 8005cac:	602b      	str	r3, [r5, #0]
 8005cae:	f7fb f9e2 	bl	8001076 <_fstat>
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	d102      	bne.n	8005cbc <_fstat_r+0x1c>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	b103      	cbz	r3, 8005cbc <_fstat_r+0x1c>
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	bd38      	pop	{r3, r4, r5, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200003f4 	.word	0x200003f4

08005cc4 <_isatty_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4d06      	ldr	r5, [pc, #24]	@ (8005ce0 <_isatty_r+0x1c>)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4608      	mov	r0, r1
 8005cce:	602b      	str	r3, [r5, #0]
 8005cd0:	f7fb f9e1 	bl	8001096 <_isatty>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d102      	bne.n	8005cde <_isatty_r+0x1a>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	b103      	cbz	r3, 8005cde <_isatty_r+0x1a>
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	200003f4 	.word	0x200003f4

08005ce4 <_sbrk_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d06      	ldr	r5, [pc, #24]	@ (8005d00 <_sbrk_r+0x1c>)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	602b      	str	r3, [r5, #0]
 8005cf0:	f7fb f9ea 	bl	80010c8 <_sbrk>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_sbrk_r+0x1a>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_sbrk_r+0x1a>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	200003f4 	.word	0x200003f4

08005d04 <_init>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr

08005d10 <_fini>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	bf00      	nop
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr
